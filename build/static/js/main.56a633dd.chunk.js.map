{"version":3,"sources":["Components/Summary/Summary.module.css","Containers/Interface/Interface.module.css","Components/Input/Input.module.css","Components/Button/Button.module.css","Containers/Interface/AddDNA/AddDNA.module.css","Components/Modal/Modal.module.css","Components/Backdrop/Backdrop.module.css","Components/DNA/DNA.module.css","Containers/Interface/ViewDNA/ViewDNA.module.css","App.module.css","Components/Input/Input.js","Components/Button/Button.js","Containers/Interface/AddDNA/AddDNA.js","hoc/Aux/Aux.js","Components/Backdrop/Backdrop.js","Components/Modal/Modal.js","Components/DNA/DNA.js","Components/Summary/Summary.js","Containers/Interface/ViewDNA/ViewDNA.js","Containers/Interface/Interface.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","input","props","inputElement","inputClasses","classes","InputElement","invalid","touched","push","Invalid","elementType","elementConfig","className","join","value","onChange","changed","validationError","ErrMessage","name","Input","button","disabled","Button","btnType","onClick","clicked","children","AddDNA","state","DNAForm","sequenceName","type","placeholder","validation","required","minLength","validChar","sequenceExists","valid","sequenceDescription","sequenceDNA","exists","formIsValid","addHandler","event","preventDefault","formData","formElementIdentifier","DNA","setState","inputChangedHandler","inputIdentifier","updatedForm","updatedFormElement","target","checkValidity","rules","isValid","trim","length","test","this","key","formElementsArray","id","config","buttonStatus","form","onSubmit","Label","map","formElement","FormLayout","Component","aux","backdrop","show","Backdrop","Modal","nextProps","nextState","Aux","modalClosed","style","transform","opacity","executeSeqChange","seq","sequence","truncatedSequence","slice","description","Summary","counter","items","k","DNAred","DNAorange","DNAblue","DNAgreen","ViewDNA","search","sorted","sortSequenceName","sort","a","b","x","toLowerCase","y","showSequence","hideSequence","controls","listDNA","dna","searchArr","includes","summary","lastSequence","View","Interface","heading","mainList","view","to","exact","path","render","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8GACAA,EAAOC,QAAU,CAAC,OAAS,wBAAwB,QAAU,yBAAyB,SAAW,0BAA0B,UAAY,2BAA2B,IAAM,uB,gBCAxKD,EAAOC,QAAU,CAAC,QAAU,2BAA2B,SAAW,4BAA4B,SAAW,4BAA4B,KAAO,wBAAwB,OAAS,4B,gBCA7KD,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,aAAe,4BAA4B,QAAU,uBAAuB,WAAa,4B,sBCAxID,EAAOC,QAAU,CAAC,OAAS,uBAAuB,QAAU,wBAAwB,KAAO,uB,gBCA3FD,EAAOC,QAAU,CAAC,WAAa,2BAA2B,MAAQ,wB,wBCAlED,EAAOC,QAAU,CAAC,MAAQ,uB,gBCA1BD,EAAOC,QAAU,CAAC,SAAW,6B,gBCA7BD,EAAOC,QAAU,CAAC,IAAM,mB,gBCAxBD,EAAOC,QAAU,CAAC,KAAO,wB,gBCAzBD,EAAOC,QAAU,CAAC,IAAM,mB,+MCqDTC,EAlDD,SAACC,GAEX,IAAIC,EAAe,KACbC,EAAe,CAACC,IAAQC,cAM9B,OAJGJ,EAAMK,SAAWL,EAAMM,SACtBJ,EAAaK,KAAKJ,IAAQK,SAGvBR,EAAMS,aACT,IAAK,QACDR,EAAe,2CACSD,EAAMU,cADf,CAEKC,UAAWT,EAAaU,KAAK,KAC7BC,MAAOb,EAAMa,MACbC,SAAUd,EAAMe,WAEpC,MACJ,IAAK,WACDd,EAAe,8CACSD,EAAMU,cADf,CAEKC,UAAWT,EAAaU,KAAK,KAC7BC,MAAOb,EAAMa,MACbC,SAAUd,EAAMe,WAEpC,MACJ,QACId,EAAe,2CACSD,EAAMU,cADf,CAEKC,UAAWT,EAAaU,KAAK,KAC7BC,MAAOb,EAAMa,MACbC,SAAUd,EAAMe,WAK5C,IAAIC,EAAkB,KAKtB,OAJGhB,EAAMK,SAAWL,EAAMM,UACtBU,EAAkB,uBAAGL,UAAWR,IAAQc,YAAtB,wBAAwDjB,EAAMkB,OAIhF,yBAAKP,UAAWR,IAAQgB,OACnBlB,EACAe,I,iBCrCEI,EAPA,SAACpB,GAAD,OACX,4BACIqB,SAAUrB,EAAMqB,SAChBV,UAAW,CAACR,IAAQmB,OAAQnB,IAAQH,EAAMuB,UAAUX,KAAK,KACzDY,QAASxB,EAAMyB,SAAUzB,EAAM0B,W,8kBCuNxBC,E,2MAvNXC,MAAQ,CACJC,QAAS,CACLC,aAAc,CACVZ,KAAM,kCACNT,YAAa,QACbC,cAAe,CACXqB,KAAM,OACNC,YAAa,iBAEjBnB,MAAO,GACPoB,WAAY,CACRC,UAAU,EACVC,UAAW,EACXC,WAAW,EACXC,gBAAgB,GAEpBC,OAAO,EACPhC,SAAS,GAEbiC,oBAAqB,CACjBrB,KAAM,sEACNT,YAAa,QACbC,cAAe,CACXqB,KAAM,OACNC,YAAa,wBAEjBnB,MAAO,GACPoB,WAAY,CACRC,UAAU,EACVC,UAAW,GACXC,WAAW,EACXC,gBAAgB,GAEpBC,OAAO,EACPhC,SAAS,GAEbkC,YAAa,CACTtB,KAAM,4DACNT,YAAa,WACbC,cAAe,CACXqB,KAAM,OACNC,YAAa,gBAEjBnB,MAAO,GACPoB,WAAY,CACRC,UAAU,EACVE,WAAW,EACXD,UAAW,EACXE,gBAAgB,GAEpBC,OAAO,EACPhC,SAAS,EACTmC,QAAQ,IAIhBC,aAAa,G,EAGjBC,WAAa,SAACC,GACVA,EAAMC,iBACN,IAAMC,EAAW,GACjB,IAAK,IAAIC,KAAyB,EAAKnB,MAAMC,QACzCiB,EAASC,GAAyB,EAAKnB,MAAMC,QAAQkB,GAAuBlC,MAEhF,EAAKb,MAAMgD,IAAIzC,KAAKuC,GACpB,EAAKG,SAAS,CACVpB,QAAS,CACLC,aAAc,CACVZ,KAAM,kCACNT,YAAa,QACbC,cAAe,CACfqB,KAAM,OACNC,YAAa,iBAEbnB,MAAO,GACPoB,WAAY,CACRC,UAAU,EACVC,UAAW,EACXC,WAAW,EACXC,gBAAgB,GAEpBC,OAAO,EACPhC,SAAS,GAEbiC,oBAAqB,CACjBrB,KAAM,sEACNT,YAAa,QACbC,cAAe,CACXqB,KAAM,OACNC,YAAa,wBAEjBnB,MAAO,GACPoB,WAAY,CACRC,UAAU,EACVC,UAAW,GACXC,WAAW,EACXC,gBAAgB,GAEpBC,OAAO,EACPhC,SAAS,GAEbkC,YAAa,CACTtB,KAAM,4DACNT,YAAa,WACbC,cAAe,CACXqB,KAAM,OACNC,YAAa,gBAEjBnB,MAAO,GACPoB,WAAY,CACRC,UAAU,EACVE,WAAW,EACXD,UAAW,EACXE,gBAAgB,GAEpBC,OAAO,EACPhC,SAAS,EACTmC,QAAQ,O,EAmCxBS,oBAAsB,SAACN,EAAOO,GAC1B,IAAMC,EAAW,KACV,EAAKxB,MAAMC,SAEZwB,EAAkB,KACjBD,EAAYD,IAEnBE,EAAmBxC,MAAQ+B,EAAMU,OAAOzC,MACxCwC,EAAmBf,MAAQ,EAAKiB,cAAcF,EAAmBxC,MAAMwC,EAAmBpB,YAC1FoB,EAAmB/C,SAAU,EAC7B8C,EAAYD,GAAmBE,EAC/B,IAAIX,GAAc,EAClB,IAAI,IAAIS,KAAmBC,EACvBV,EAAcU,EAAYD,GAAiBb,OAASI,EAGxD,EAAKO,SAAS,CAACpB,QAASuB,EAAaV,YAAaA,K,6EA5CxC7B,EAAO2C,GAEjB,IAAIC,GAAU,EAWd,GATGD,EAAMtB,WACLuB,EAA2B,KAAjB5C,EAAM6C,QAAiBD,GAElCD,EAAMrB,YACLsB,EAAU5C,EAAM8C,QAAUH,EAAMrB,WAAasB,GAE9CD,EAAMpB,YACLqB,EAAU,WAAWG,KAAK/C,IAAU4C,GAErCD,EAAMnB,eAAe,CACpB,IAAII,GAAS,EACb,GAAGoB,KAAK7D,MAAMgD,IAAIW,OAAS,EAAE,CACzB,IAAI,IAAIG,KAAOD,KAAK7D,MAAMgD,IACnBa,KAAK7D,MAAMgD,IAAIc,GAAKtB,cAAgB3B,IACnC4B,GAAS,GAGjBgB,GAAWhB,GAAUgB,GAG7B,OAAOA,I,+BAuBF,IAAD,OAGEM,EAAoB,GAC1B,IAAK,IAAID,KAAOD,KAAKjC,MAAMC,QACvBkC,EAAkBxD,KAAK,CACnByD,GAAIF,EACJG,OAAQJ,KAAKjC,MAAMC,QAAQiC,KAGnC,IAAII,EAAe,KAChBL,KAAKjC,MAAMc,cACVwB,EAAa,WAEjB,IAAIC,EACA,0BAAMC,SAAUP,KAAKlB,YACjB,uBAAGhC,UAAWR,IAAQkE,OAAtB,4CACCN,EAAkBO,KAAI,SAAAC,GAAW,OACtB,kBAACpD,EAAD,CACID,KAAMqD,EAAYN,OAAO/C,KACzB4C,IAAKS,EAAYP,GACjBvD,YAAa8D,EAAYN,OAAOxD,YAChCC,cAAe6D,EAAYN,OAAOvD,cAClCG,MAAO0D,EAAYN,OAAOpD,MAC1BE,QAAS,SAAC6B,GAAD,OAAW,EAAKM,oBAAoBN,EAAO2B,EAAYP,KAChE3D,SAAWkE,EAAYN,OAAO3B,MAC9BhC,QAASiE,EAAYN,OAAO3D,aAK5C,kBAACgB,EAAD,CAAQD,UAAWwC,KAAKjC,MAAMc,YAAanB,QAAS2C,GAApD,WAIR,OACI,yBAAKvD,UAAWR,IAAQqE,YACnBL,O,GAlNIM,a,iBCLNC,EAFH,SAAC1E,GAAD,OAAWA,EAAM0B,U,iBCOdiD,EAJE,SAAC3E,GAAD,OACbA,EAAM4E,KAAO,yBAAKjE,UAAWR,IAAQ0E,SAAUrD,QAASxB,EAAMyB,UAAkB,MCyBrEqD,E,8LAvBWC,EAAWC,GAC7B,OAAOD,EAAUH,OAASf,KAAK7D,MAAM4E,MAAQG,EAAUrD,WAAamC,KAAK7D,MAAM0B,W,+BAK/E,OACI,kBAACuD,EAAD,KACA,kBAACJ,EAAD,CAAUD,KAAMf,KAAK7D,MAAM4E,KAAMnD,QAASoC,KAAK7D,MAAMkF,cACrD,yBACIvE,UAAWR,IAAQ2E,MACnBK,MAAO,CACHC,UAAWvB,KAAK7D,MAAM4E,KAAO,gBAAkB,qBAC/CS,QAASxB,KAAK7D,MAAM4E,KAAO,IAAM,MAGpCf,KAAK7D,MAAM0B,e,GAjBR+C,a,iBCwBLzB,E,2MAtBXsC,iBAAmB,WACf,EAAKtF,MAAMuF,IAAIhF,KAAK,EAAKP,MAAMwF,UAC/B,EAAKxF,MAAM4E,Q,wEAIX,IAAIa,EAAoB5B,KAAK7D,MAAMwF,SAKnC,OAJG3B,KAAK7D,MAAMwF,SAAS7B,OAAS,KAC5B8B,EAAoB5B,KAAK7D,MAAMwF,SAASE,MAAM,EAAE,IAAM,OAItD,yBAAK/E,UAAWR,IAAQ6C,KACpB,oCAAUa,KAAK7D,MAAMkB,MACrB,2CAAiB2C,KAAK7D,MAAM2F,aAC5B,wCAAcF,GACd,kBAACnE,EAAD,CAAQG,QAASoC,KAAKyB,kBAAtB,2B,GAlBEb,a,kCCoCHmB,E,iLAjCP,IAAIC,EAAU,EACRC,EAAQ,GACd,IAAI,IAAIC,KAAKlC,KAAK7D,MAAMuF,IACjBM,EAAU,KAAO,GAChBC,EAAMvF,KAAK,8BAEU,MAAtBsD,KAAK7D,MAAMuF,IAAIQ,GACdD,EAAMvF,KAAK,uBAAGI,UAAWR,IAAQ6F,QAASnC,KAAK7D,MAAMuF,IAAIQ,KAC9B,MAAtBlC,KAAK7D,MAAMuF,IAAIQ,GACpBD,EAAMvF,KAAK,uBAAGI,UAAWR,IAAQ8F,WAAYpC,KAAK7D,MAAMuF,IAAIQ,KACjC,MAAtBlC,KAAK7D,MAAMuF,IAAIQ,GACpBD,EAAMvF,KAAK,uBAAGI,UAAWR,IAAQ+F,SAAUrC,KAAK7D,MAAMuF,IAAIQ,KAC/B,MAAtBlC,KAAK7D,MAAMuF,IAAIQ,GACpBD,EAAMvF,KAAK,uBAAGI,UAAWR,IAAQgG,UAAWtC,KAAK7D,MAAMuF,IAAIQ,KAE3DD,EAAMvF,KAAK,uBAAGI,UAAWR,IAAQ6C,KAAMa,KAAK7D,MAAMuF,IAAIQ,KAE1DF,GAAU,EAKd,OAFAA,EAAU,EAGN,6BACKC,O,GA5BKrB,a,kOCsIP2B,E,2MAjIXxE,MAAQ,CACJyE,OAAQ,CACJnF,KAAM,SACNT,YAAa,QACbC,cAAe,CACXqB,KAAM,OACNC,YAAa,wBAEjBnB,MAAO,IAEXyF,QAAQ,EACR1B,MAAM,EACNY,SAAU,I,EAGdtC,oBAAsB,SAACN,GACnB,IAAMyD,E,yVAAM,IACL,EAAKzE,MAAMyE,QAElBA,EAAOxF,MAAQ+B,EAAMU,OAAOzC,MAC5B,EAAKoC,SAAS,CAACoD,OAAQA,IACvB,EAAKpD,SAAS,CAACqD,QAAQ,K,EAG3BC,iBAAmB,WAMf,EAAKvG,MAAMgD,IAAIwD,MALf,SAAkBC,EAAGC,GACjB,IAAIC,EAAIF,EAAE3E,aAAa8E,cACnBC,EAAIH,EAAE5E,aAAa8E,cACvB,OAASD,EAAIE,GAAM,EAAMF,EAAIE,EAAK,EAAI,KAG1C,EAAK5D,SAAS,CAACqD,QAAQ,K,EAG3BQ,aAAe,WACX,EAAK7D,SAAS,CAAC2B,MAAM,K,EAGzBmC,aAAe,WACX,EAAK9D,SAAS,CAAC2B,MAAM,K,wEAIhB,IAAD,OACAoC,EAAW,KACXC,EAAU,KAiBd,GAhBGpD,KAAK7D,MAAMgD,IAAIW,OAAS,IACvBqD,EACI,6BACI,kBAAC1F,EAAD,CAAQC,QAAS,OAAQE,QAASoC,KAAK0C,kBAAvC,QACA,kBAACpF,EAAD,CACId,SAAS,EACTC,SAAS,EACTG,YAAaoD,KAAKjC,MAAMyE,OAAO5F,YAC/BS,KAAM2C,KAAKjC,MAAMyE,OAAOnF,KACxBR,cAAemD,KAAKjC,MAAMyE,OAAO3F,cACjCG,MAAOgD,KAAKjC,MAAMyE,OAAOxF,MACzBE,QAAS,SAAC6B,GAAD,OAAW,EAAKM,oBAAoBN,QAKzDiB,KAAK7D,MAAMgD,IAAIW,OAAS,GAAiC,KAA5BE,KAAKjC,MAAMyE,OAAOxF,OAAiBgD,KAAKjC,MAAM0E,OAE3EW,EACI,6BACKpD,KAAK7D,MAAMgD,IAAIsB,KAAI,SAAA4C,GAChB,OAAO,kBAAC,EAAD,CACKlD,GAAIkD,EACJhG,KAAMgG,EAAIpF,aACV6D,YAAauB,EAAI3E,oBACjBiD,SAAU0B,EAAI1E,YACdoC,KAAM,EAAKkC,aACXvB,IAAK,EAAK3D,MAAM4D,oBAKtC,GAA+B,KAA5B3B,KAAKjC,MAAMyE,OAAOxF,MAAa,CACpC,IAAIsG,EAAY,GAChB,IAAI,IAAIrD,KAAOD,KAAK7D,MAAMgD,IAAI,CACXa,KAAK7D,MAAMgD,IAAIc,GAAKhC,aACdsF,SAASvD,KAAKjC,MAAMyE,OAAOxF,QAG5CsG,EAAU5G,KAAKuD,GAGvBmD,EACI,6BACKE,EAAU7C,KAAI,SAAAR,GACX,OAAO,kBAAC,EAAD,CACKE,GAAIF,EACJ5C,KAAM,EAAKlB,MAAMgD,IAAIc,GAAKhC,aAC1B6D,YAAa,EAAK3F,MAAMgD,IAAIc,GAAKvB,oBACjCiD,SAAU,EAAKxF,MAAMgD,IAAIc,GAAKtB,YAC9BoC,KAAM,EAAKkC,aACXvB,IAAK,EAAK3D,MAAM4D,eAMxC2B,EAAY,QAGZF,EAAU,+DAEd,IAAII,EAAW,KACf,GAAGxD,KAAKjC,MAAMgD,KAAK,CACf,IAAI0C,EAAezD,KAAKjC,MAAM4D,SAAS3B,KAAKjC,MAAM4D,SAAS7B,OAAO,GAElE0D,EACI,kBAAC,EAAD,CAAS9B,IAAK+B,IAItB,OACI,yBAAK3G,UAAWR,IAAQoH,MACnBP,EACAC,EACD,kBAAC,EAAD,CAAOrC,KAAMf,KAAKjC,MAAMgD,KAAMM,YAAarB,KAAKkD,cAC3CM,Q,GA3HC5C,a,iBCgCP+C,E,2MA9BX5F,MAAO,CACHoB,IAAK,I,wEAGC,IAAD,OACL,OACI,yBAAKrC,UAAWR,IAAQwE,UACpB,gCACI,wBAAIhE,UAAWR,IAAQsH,SAAvB,iBAEA,6BACI,wBAAI9G,UAAWR,IAAQuH,UACnB,wBAAI/G,UAAWR,IAAQwH,MAAM,kBAAC,IAAD,CAASC,GAAG,IAAIC,OAAK,GAArB,kBAC7B,wBAAIlH,UAAWR,IAAQwH,MAAM,kBAAC,IAAD,CAASC,GAAG,iBAAZ,oBAIzC,kBAAC,IAAD,CACIE,KAAK,IACLD,OAAK,EACLE,OAAQ,SAAC/H,GAAD,OAAY,kBAAC,EAAD,eAASgD,IAAK,EAAKpB,MAAMoB,KAAShD,OAC1D,kBAAC,IAAD,CACI8H,KAAK,gBACLC,OAAQ,SAAC/H,GAAD,OAAY,kBAAC,EAAD,eAAQgD,IAAK,EAAKpB,MAAMoB,KAAShD,Y,GAxBjDyE,a,iBCQTuD,MAVf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKrH,UAAWR,IAAQ6H,KACtB,kBAAC,EAAD,SCCYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASP,OAAO,kBAAC,EAAD,MAASQ,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.56a633dd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"DNAred\":\"Summary_DNAred__1Cr_B\",\"DNAblue\":\"Summary_DNAblue__3RHdO\",\"DNAgreen\":\"Summary_DNAgreen__3AHWO\",\"DNAorange\":\"Summary_DNAorange__2WGPQ\",\"DNA\":\"Summary_DNA__2uMhN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"heading\":\"Interface_heading__10019\",\"backdrop\":\"Interface_backdrop__zz14B\",\"mainList\":\"Interface_mainList__-MwIR\",\"view\":\"Interface_view__VNlC7\",\"active\":\"Interface_active__28kFK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__2MHHb\",\"InputElement\":\"Input_InputElement__3_77R\",\"Invalid\":\"Input_Invalid__1c5Dv\",\"ErrMessage\":\"Input_ErrMessage__3lhFP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__HOrbw\",\"Success\":\"Button_Success__wYGCa\",\"Sort\":\"Button_Sort__5TkBE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FormLayout\":\"AddDNA_FormLayout__RF3tm\",\"Label\":\"AddDNA_Label__2QpNX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Modal\":\"Modal_Modal__3ihEg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Backdrop\":\"Backdrop_Backdrop__MfeG3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"DNA\":\"DNA_DNA__2SSAD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"View\":\"ViewDNA_View__3HEz6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__16ZpL\"};","import React from 'react';\n\nimport classes from './Input.module.css';\n\nconst input = (props) => {\n\n    let inputElement = null;\n    const inputClasses = [classes.InputElement];\n\n    if(props.invalid && props.touched){\n        inputClasses.push(classes.Invalid);\n    }\n\n    switch(props.elementType){\n        case('input'):\n            inputElement = <input \n                                {...props.elementConfig}\n                                className={inputClasses.join(' ')}\n                                value={props.value}\n                                onChange={props.changed}\n                            />;\n            break;\n        case('textarea'):\n            inputElement = <textarea \n                                {...props.elementConfig}\n                                className={inputClasses.join(' ')}\n                                value={props.value}\n                                onChange={props.changed}\n                            />;\n            break;\n        default:\n            inputElement = <input \n                                {...props.elementConfig}\n                                className={inputClasses.join(' ')}\n                                value={props.value}\n                                onChange={props.changed}\n                            />;\n            \n    }\n\n    let validationError = null;\n    if(props.invalid && props.touched){\n        validationError = <p className={classes.ErrMessage}>Please enter a valid {props.name}</p>\n    }\n\n    return (\n        <div className={classes.Input}>\n            {inputElement}\n            {validationError}\n        </div>\n    );\n\n};\n\nexport default input;","import React from 'react';\n\nimport classes from './Button.module.css';\n\nconst button = (props) => (\n    <button\n        disabled={props.disabled}\n        className={[classes.Button, classes[props.btnType]].join(' ')}\n        onClick={props.clicked}>{props.children}</button>\n);\n\nexport default button;","import React, { Component } from 'react';\n\nimport Input from '../../../Components/Input/Input';\nimport Button from '../../../Components/Button/Button';\n\nimport classes from './AddDNA.module.css';\n\nclass AddDNA extends Component {\n    state = {\n        DNAForm: {\n            sequenceName: {\n                name: 'sequence name (Ex. AF016541.1) ',\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Sequence Name'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 4,\n                    validChar: false,\n                    sequenceExists: false\n                },\n                valid: false,\n                touched: false\n            },\n            sequenceDescription: {\n                name: 'sequence description (Ex. Cloning vector pUC-JK, complete sequence)',\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Sequence Description'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 10,\n                    validChar: false,\n                    sequenceExists: false\n                },\n                valid: false,\n                touched: false\n            },\n            sequenceDNA: {\n                name: 'sequence (Ex. TCGCGCGTTTCG...) or sequence already exists',\n                elementType: 'textarea',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'DNA Sequence'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    validChar: true,\n                    minLength: 4,\n                    sequenceExists: true\n                },\n                valid: false,\n                touched: false,\n                exists: false\n                \n            }\n        },\n        formIsValid: false\n    }\n    \n    addHandler = (event) => {\n        event.preventDefault();\n        const formData = {};\n        for (let formElementIdentifier in this.state.DNAForm) {\n            formData[formElementIdentifier] = this.state.DNAForm[formElementIdentifier].value;\n        }\n        this.props.DNA.push(formData);\n        this.setState({\n            DNAForm: {\n                sequenceName: {\n                    name: 'sequence name (Ex. AF016541.1) ',\n                    elementType: 'input',\n                    elementConfig: {\n                    type: 'text',\n                    placeholder: 'Sequence Name'\n                    },\n                    value: '',\n                    validation: {\n                        required: true,\n                        minLength: 4,\n                        validChar: false,\n                        sequenceExists: false\n                    },\n                    valid: false,\n                    touched: false\n                },\n                sequenceDescription: {\n                    name: 'sequence description (Ex. Cloning vector pUC-JK, complete sequence)',\n                    elementType: 'input',\n                    elementConfig: {\n                        type: 'text',\n                        placeholder: 'Sequence Description'\n                    },\n                    value: '',\n                    validation: {\n                        required: true,\n                        minLength: 10,\n                        validChar: false,\n                        sequenceExists: false\n                    },\n                    valid: false,\n                    touched: false\n                },\n                sequenceDNA: {\n                    name: 'sequence (Ex. TCGCGCGTTTCG...) or sequence already exists',\n                    elementType: 'textarea',\n                    elementConfig: {\n                        type: 'text',\n                        placeholder: 'DNA Sequence'\n                    },\n                    value: '',\n                    validation: {\n                        required: true,\n                        validChar: true,\n                        minLength: 4,\n                        sequenceExists: true\n                    },\n                    valid: false,\n                    touched: false,\n                    exists: false\n                    \n                }\n            }\n        })\n    }\n\n    checkValidity(value, rules,){\n\n        let isValid = true;\n\n        if(rules.required){\n            isValid = value.trim() !== '' && isValid;\n        }\n        if(rules.minLength){\n            isValid = value.length >= rules.minLength && isValid;\n        }\n        if(rules.validChar){\n            isValid = /^[A-Z]+$/.test(value) && isValid;   \n        }\n        if(rules.sequenceExists){\n            let exists = false;\n            if(this.props.DNA.length > 0){\n                for(let key in this.props.DNA){\n                    if(this.props.DNA[key].sequenceDNA === value){\n                        exists = true;\n                    }\n                }\n                isValid = !exists && isValid;\n            }\n        }\n        return isValid;\n    }\n    \n\n    inputChangedHandler = (event, inputIdentifier) => {\n        const updatedForm = {\n            ...this.state.DNAForm\n        };\n        const updatedFormElement = { \n            ...updatedForm[inputIdentifier]\n        };\n        updatedFormElement.value = event.target.value;\n        updatedFormElement.valid = this.checkValidity(updatedFormElement.value,updatedFormElement.validation);\n        updatedFormElement.touched = true;\n        updatedForm[inputIdentifier] = updatedFormElement;\n        let formIsValid = true;\n        for(let inputIdentifier in updatedForm){\n            formIsValid = updatedForm[inputIdentifier].valid && formIsValid;\n        }\n        \n        this.setState({DNAForm: updatedForm, formIsValid: formIsValid});\n    }\n\n    render(){\n       \n\n        const formElementsArray = [];\n        for (let key in this.state.DNAForm) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.DNAForm[key]\n            });\n        }\n        let buttonStatus = null;\n        if(this.state.formIsValid){\n            buttonStatus='Success';\n        }\n        let form = (\n            <form onSubmit={this.addHandler}>\n                <p className={classes.Label}>Enter DNA name, description and sequence</p>\n                {formElementsArray.map(formElement => (\n                            <Input \n                                name={formElement.config.name}\n                                key={formElement.id}\n                                elementType={formElement.config.elementType}\n                                elementConfig={formElement.config.elementConfig}\n                                value={formElement.config.value}\n                                changed={(event) => this.inputChangedHandler(event, formElement.id)}\n                                invalid ={!formElement.config.valid}\n                                touched={formElement.config.touched}      \n                            />\n                        )\n                    \n                )}\n                <Button disabled={!this.state.formIsValid} btnType={buttonStatus}>Submit</Button>\n            </form>\n\n        );\n        return(\n            <div className={classes.FormLayout}>\n                {form}\n            </div>\n        );\n    }\n}\n\nexport default AddDNA;","const aux = (props) => props.children;\n\nexport default aux;","import React from 'react';\nimport classes from './Backdrop.module.css';\n\nconst backdrop = (props) => (\n    props.show ? <div className={classes.Backdrop} onClick={props.clicked}></div> : null\n);\n\nexport default backdrop","import React, {Component} from 'react';\nimport classes from './Modal.module.css';\nimport Aux from '../../hoc/Aux/Aux';\nimport Backdrop from '../Backdrop/Backdrop';\n\nclass Modal extends Component {\n    shouldComponentUpdate(nextProps, nextState){\n        return nextProps.show !== this.props.show || nextProps.children !== this.props.children;\n\n    }\n\n    render () {\n        return (\n            <Aux>\n            <Backdrop show={this.props.show} clicked={this.props.modalClosed}/>\n            <div \n                className={classes.Modal}\n                style={{\n                    transform: this.props.show ? 'translateY(0)' : 'translateY(-100vh)', \n                    opacity: this.props.show ? '1' : '0'\n                }}\n            >\n                {this.props.children}\n            </div>\n        </Aux>\n        );\n    }\n};\n\nexport default Modal;\n\n\n/*\n style={{\n                    transform: this.props.show ? 'translateY(0)' : 'translateY(-100vh)', \n                    opacity: this.props.show ? '1' : '0'\n                }}\n*/","import React, { Component } from 'react';\nimport classes from './DNA.module.css';\nimport Button from '../Button/Button';\n\n\nclass DNA extends Component{\n\n    executeSeqChange = () => {\n        this.props.seq.push(this.props.sequence);\n        this.props.show();\n    }\n\n    render(){\n        let truncatedSequence = this.props.sequence;\n        if(this.props.sequence.length > 35){\n            truncatedSequence = this.props.sequence.slice(0,35) + '...';\n        }\n\n        return (\n            <div className={classes.DNA}>\n                <p>Name: {this.props.name}</p>\n                <p>Description: {this.props.description}</p>\n                <p>Sequence: {truncatedSequence}</p>\n                <Button clicked={this.executeSeqChange}>View Full Sequence</Button>\n            </div>\n        );\n        }\n};\n\nexport default DNA;\n\n","import React, { Component } from 'react';\nimport classes from './Summary.module.css';\n\n\nclass Summary extends Component {\n\n    render() {\n        \n        let counter = 0;\n        const items = []\n        for(let k in this.props.seq){\n            if(counter % 77 === 0){\n                items.push(<br></br>)\n            }\n            if(this.props.seq[k] === 'A'){\n                items.push(<p className={classes.DNAred}>{this.props.seq[k]}</p>)\n            }else if(this.props.seq[k] === 'G'){\n                items.push(<p className={classes.DNAorange}>{this.props.seq[k]}</p>)\n            }else if(this.props.seq[k] === 'T'){\n                items.push(<p className={classes.DNAblue}>{this.props.seq[k]}</p>)\n            }else if(this.props.seq[k] === 'C'){\n                items.push(<p className={classes.DNAgreen}>{this.props.seq[k]}</p>)\n            }else{\n                items.push(<p className={classes.DNA}>{this.props.seq[k]}</p>)\n            }\n            counter +=1;\n          \n        }\n        counter = 0;\n\n        return (\n            <div>\n                {items}\n            </div>\n        );\n    }\n\n\n\n};\n\nexport default Summary;\n","import React, { Component } from 'react';\nimport Modal from '../../../Components/Modal/Modal';\nimport Button from '../../../Components/Button/Button';\nimport DNA from '../../../Components/DNA/DNA';\nimport classes from './ViewDNA.module.css';\nimport Input from '../../../Components/Input/Input';\nimport Summary from '../../../Components/Summary/Summary';\n\nclass ViewDNA extends Component {\n    state = {\n        search: {\n            name: 'Search',\n            elementType: 'input',\n            elementConfig: {\n                type: 'text',\n                placeholder: 'Search Sequence Name'\n            },\n            value: ''\n        },\n        sorted: false,\n        show: false,\n        sequence: []\n    }\n\n    inputChangedHandler = (event) => {\n        const search = {\n            ...this.state.search\n        };\n        search.value = event.target.value;\n        this.setState({search: search});\n        this.setState({sorted: false});\n    }\n\n    sortSequenceName = () => {\n        function mySorter(a, b) {\n            let x = a.sequenceName.toLowerCase();\n            let y = b.sequenceName.toLowerCase();\n            return ((x < y) ? -1 : ((x > y) ? 1 : 0));\n        }\n        this.props.DNA.sort(mySorter);\n        this.setState({sorted: true});\n    }\n\n    showSequence = () => {\n        this.setState({show: true});\n    }\n\n    hideSequence = () => {\n        this.setState({show: false});\n    }\n\n\n    render(){\n        let controls = null;\n        let listDNA = null;\n        if(this.props.DNA.length > 0){\n            controls =(\n                <div>\n                    <Button btnType={'Sort'} clicked={this.sortSequenceName}>Sort</Button>\n                    <Input\n                        invalid={false}\n                        touched={false}\n                        elementType={this.state.search.elementType}\n                        name={this.state.search.name}\n                        elementConfig={this.state.search.elementConfig}\n                        value={this.state.search.value}\n                        changed={(event) => this.inputChangedHandler(event)}\n                    />\n                </div>\n            );\n        }\n        if((this.props.DNA.length > 0 && this.state.search.value === '') || this.state.sorted){\n   \n            listDNA = (\n                <div>\n                    {this.props.DNA.map(dna => {\n                        return <DNA \n                                    id={dna}\n                                    name={dna.sequenceName} \n                                    description={dna.sequenceDescription} \n                                    sequence={dna.sequenceDNA}\n                                    show={this.showSequence}\n                                    seq={this.state.sequence}\n                                />\n                    })}\n                </div>\n            );\n        }else if(this.state.search.value !== ''){\n            let searchArr = [];\n            for(let key in this.props.DNA){\n                let currName = this.props.DNA[key].sequenceName;\n                let check = currName.includes(this.state.search.value);\n                if(check){\n                   \n                    searchArr.push(key);\n                }\n            }\n            listDNA = (\n                <div>\n                    {searchArr.map(key => {\n                        return <DNA \n                                    id={key}\n                                    name={this.props.DNA[key].sequenceName} \n                                    description={this.props.DNA[key].sequenceDescription} \n                                    sequence={this.props.DNA[key].sequenceDNA}\n                                    show={this.showSequence}\n                                    seq={this.state.sequence}\n                                />\n                    })}\n                    \n                </div>\n            );\n            searchArr = [];\n            \n        }else{\n            listDNA = <h2>No DNA samples have been added.</h2>\n        }\n        let summary  = null;\n        if(this.state.show){\n            let lastSequence = this.state.sequence[this.state.sequence.length-1];\n\n            summary = (\n                <Summary seq={lastSequence}/>\n            );\n        }\n\n        return(\n            <div className={classes.View}>\n                {controls}\n                {listDNA}\n                <Modal show={this.state.show} modalClosed={this.hideSequence}>\n                    {summary}\n                </Modal>\n            </div>\n        );\n    }\n}\n\nexport default ViewDNA;","import React,{ Component } from 'react';\nimport { Route, NavLink } from 'react-router-dom';\n\nimport AddDNA from './AddDNA/AddDNA';\nimport ViewDNA from './ViewDNA/ViewDNA';\n\nimport classes from './Interface.module.css';\n\n\nclass Interface extends Component {\n    state= {\n        DNA: []\n    }\n\n    render() {\n        return(\n            <div className={classes.backdrop}>\n                <header >\n                    <h1 className={classes.heading}>Visualize DNA</h1>\n                    \n                    <nav>\n                        <ul className={classes.mainList}>\n                            <li className={classes.view}><NavLink to='/' exact>View Sequence</NavLink></li>\n                            <li className={classes.view}><NavLink to='/add-sequence'>Add Sequence</NavLink></li>\n                        </ul>\n                    </nav>\n                </header>\n                <Route \n                    path='/'\n                    exact\n                    render={(props) => (<ViewDNA DNA={this.state.DNA} {...props}  />)} />\n                <Route \n                    path='/add-sequence'\n                    render={(props) => (<AddDNA DNA={this.state.DNA} {...props} />)} />  \n            </div>\n        );\n    }\n\n}\n\nexport default Interface;","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport Interface from './Containers/Interface/Interface';\n\nimport classes from './App.module.css';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className={classes.App}>\n        <Interface/>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}