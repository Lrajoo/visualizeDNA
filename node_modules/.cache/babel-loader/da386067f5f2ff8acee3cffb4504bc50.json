{"ast":null,"code":"var _jsxFileName = \"/Users/lingessrajoo/Desktop/GinkgoBioworks/visualizeDNA/visual-dna/src/Containers/Interface/AddDNA/AddDNA.js\";\nimport React, { Component } from 'react';\nimport Input from '../../../Components/Input/Input';\nimport classes from './AddDNA.module.css';\n\nclass AddDNA extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      DNAForm: {\n        sequenceName: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Sequence Name'\n          }\n        },\n        sequenceDescription: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Sequence Description'\n          }\n        },\n        sequenceDNA: {\n          elementType: 'textarea',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'DNA Sequence'\n          }\n        }\n      }\n    };\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.DNAForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.DNAForm[key]\n      });\n    }\n\n    let form = React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: classes.Label,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, \"Enter\"), formElementsArray.map(formElement => React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    })));\n    return React.createElement(\"div\", {\n      className: classes.C,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, form);\n  }\n\n}\n\nexport default AddDNA;","map":{"version":3,"sources":["/Users/lingessrajoo/Desktop/GinkgoBioworks/visualizeDNA/visual-dna/src/Containers/Interface/AddDNA/AddDNA.js"],"names":["React","Component","Input","classes","AddDNA","state","DNAForm","sequenceName","elementType","elementConfig","type","placeholder","sequenceDescription","sequenceDNA","render","formElementsArray","key","push","id","config","form","Label","map","formElement","value","C"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAOC,KAAP,MAAkB,iCAAlB;AAEA,OAAOC,OAAP,MAAoB,qBAApB;;AAEA,MAAMC,MAAN,SAAqBH,SAArB,CAA+B;AAAA;AAAA;AAAA,SAC3BI,KAD2B,GACnB;AACJC,MAAAA,OAAO,EAAE;AACLC,QAAAA,YAAY,EAAE;AACVC,UAAAA,WAAW,EAAE,OADH;AAEVC,UAAAA,aAAa,EAAE;AACXC,YAAAA,IAAI,EAAE,MADK;AAEXC,YAAAA,WAAW,EAAE;AAFF;AAFL,SADT;AAQLC,QAAAA,mBAAmB,EAAE;AACjBJ,UAAAA,WAAW,EAAE,OADI;AAEjBC,UAAAA,aAAa,EAAE;AACXC,YAAAA,IAAI,EAAE,MADK;AAEXC,YAAAA,WAAW,EAAE;AAFF;AAFE,SARhB;AAeLE,QAAAA,WAAW,EAAE;AACTL,UAAAA,WAAW,EAAE,UADJ;AAETC,UAAAA,aAAa,EAAE;AACXC,YAAAA,IAAI,EAAE,MADK;AAEXC,YAAAA,WAAW,EAAE;AAFF;AAFN;AAfR;AADL,KADmB;AAAA;;AA2B3BG,EAAAA,MAAM,GAAE;AACJ,UAAMC,iBAAiB,GAAG,EAA1B;;AACA,SAAK,IAAIC,GAAT,IAAgB,KAAKX,KAAL,CAAWC,OAA3B,EAAoC;AAChCS,MAAAA,iBAAiB,CAACE,IAAlB,CAAuB;AACnBC,QAAAA,EAAE,EAAEF,GADe;AAEnBG,QAAAA,MAAM,EAAE,KAAKd,KAAL,CAAWC,OAAX,CAAmBU,GAAnB;AAFW,OAAvB;AAIH;;AACD,QAAII,IAAI,GACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAG,MAAA,SAAS,EAAEjB,OAAO,CAACkB,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADJ,EAEKN,iBAAiB,CAACO,GAAlB,CAAsBC,WAAW,IAC9B,oBAAC,KAAD;AACI,MAAA,GAAG,EAAEA,WAAW,CAACL,EADrB;AAEI,MAAA,WAAW,EAAEK,WAAW,CAACJ,MAAZ,CAAmBX,WAFpC;AAGI,MAAA,aAAa,EAAEe,WAAW,CAACJ,MAAZ,CAAmBV,aAHtC;AAII,MAAA,KAAK,EAAEc,WAAW,CAACJ,MAAZ,CAAmBK,KAJ9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,CAFL,CADJ;AAcA,WACI;AAAK,MAAA,SAAS,EAAErB,OAAO,CAACsB,CAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKL,IADL,CADJ;AAKH;;AAtD0B;;AAyD/B,eAAehB,MAAf","sourcesContent":["import React, { Component } from 'react';\n\nimport Input from '../../../Components/Input/Input';\n\nimport classes from './AddDNA.module.css';\n\nclass AddDNA extends Component {\n    state = {\n        DNAForm: {\n            sequenceName: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Sequence Name'\n                }\n            },\n            sequenceDescription: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Sequence Description'\n                }\n            },\n            sequenceDNA: {\n                elementType: 'textarea',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'DNA Sequence'\n                }\n            }\n        }\n    }\n\n    render(){\n        const formElementsArray = [];\n        for (let key in this.state.DNAForm) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.DNAForm[key]\n            });\n        }\n        let form = (\n            <form>\n                <p className={classes.Label}>Enter</p>\n                {formElementsArray.map(formElement => (\n                    <Input \n                        key={formElement.id}\n                        elementType={formElement.config.elementType}\n                        elementConfig={formElement.config.elementConfig}\n                        value={formElement.config.value}\n                    />\n                ))}\n            </form>\n\n        );\n        return(\n            <div className={classes.C}>\n                {form}\n            </div>\n        );\n    }\n}\n\nexport default AddDNA;"]},"metadata":{},"sourceType":"module"}