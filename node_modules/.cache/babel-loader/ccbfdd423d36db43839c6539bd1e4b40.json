{"ast":null,"code":"import _defineProperty from \"/Users/lingessrajoo/Desktop/GinkgoBioworks/visualizeDNA/visual-dna/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/lingessrajoo/Desktop/GinkgoBioworks/visualizeDNA/visual-dna/src/Containers/Interface/AddDNA/AddDNA.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport Input from '../../../Components/Input/Input';\nimport Button from '../../../Components/Button/Button';\nimport classes from './AddDNA.module.css';\n\nclass AddDNA extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      DNAForm: {\n        sequenceName: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Sequence Name'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 8\n          },\n          valid: false\n        },\n        sequenceDescription: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Sequence Description'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 17\n          },\n          valid: false\n        },\n        sequenceDNA: {\n          elementType: 'textarea',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'DNA Sequence'\n          },\n          value: '',\n          validation: {\n            required: true,\n            validChar: true\n          },\n          valid: false,\n          validChar: false\n        }\n      }\n    };\n\n    this.addHandler = event => {\n      event.preventDefault();\n      const formData = {};\n\n      for (let formElementIdentifier in this.state.DNAForm) {\n        formData[formElementIdentifier] = this.state.DNAForm[formElementIdentifier].value;\n      }\n\n      console.log(formData);\n      this.props.DNA.push(formData);\n    };\n\n    this.inputChangedHandler = (event, inputIdentifier) => {\n      const updatedForm = _objectSpread({}, this.state.DNAForm);\n\n      const updatedFormElement = _objectSpread({}, updatedForm[inputIdentifier]);\n\n      updatedFormElement.value = event.target.value;\n      updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n      updatedFormElement.validChar = this.checkValidityChar(updatedFormElement.value, updatedFormElement.validation);\n      updatedForm[inputIdentifier] = updatedFormElement;\n      this.setState({\n        DNAForm: updatedForm\n      });\n    };\n  }\n\n  checkValidity(value, rules) {\n    let isValid = true;\n\n    if (rules.required) {\n      isValid = value.trim() !== '' && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    return isValid;\n  }\n\n  checkValidityChar(value, rules) {\n    let isValidChar = false;\n\n    if (rules.validChar) {\n      if (/^[A-Z]+$/.test(value)) {\n        isValidChar = true;\n      }\n    }\n\n    return isValidChar;\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.DNAForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.DNAForm[key]\n      });\n    }\n\n    let form = React.createElement(\"form\", {\n      onSubmit: this.addHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: classes.Label,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"Enter DNA name, description and sequence\"), formElementsArray.map(formElement => React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      changed: event => this.inputChangedHandler(event, formElement.id),\n      invalid: !formElement.config.valid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    })), React.createElement(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"Submit\"));\n    return React.createElement(\"div\", {\n      className: classes.FormLayout,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, form);\n  }\n\n}\n\nexport default AddDNA;","map":{"version":3,"sources":["/Users/lingessrajoo/Desktop/GinkgoBioworks/visualizeDNA/visual-dna/src/Containers/Interface/AddDNA/AddDNA.js"],"names":["React","Component","Input","Button","classes","AddDNA","state","DNAForm","sequenceName","elementType","elementConfig","type","placeholder","value","validation","required","minLength","valid","sequenceDescription","sequenceDNA","validChar","addHandler","event","preventDefault","formData","formElementIdentifier","console","log","props","DNA","push","inputChangedHandler","inputIdentifier","updatedForm","updatedFormElement","target","checkValidity","checkValidityChar","setState","rules","isValid","trim","length","isValidChar","test","render","formElementsArray","key","id","config","form","Label","map","formElement","FormLayout"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport Input from '../../../Components/Input/Input';\nimport Button from '../../../Components/Button/Button';\n\nimport classes from './AddDNA.module.css';\n\nclass AddDNA extends Component {\n    state = {\n        DNAForm: {\n            sequenceName: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Sequence Name'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 8\n                },\n                valid: false\n            },\n            sequenceDescription: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Sequence Description'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 17\n                },\n                valid: false\n            },\n            sequenceDNA: {\n                elementType: 'textarea',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'DNA Sequence'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    validChar: true\n                },\n                valid: false,\n                validChar: false\n            }\n        }\n    }\n    \n    addHandler = (event) => {\n        event.preventDefault();\n        const formData = {};\n        for (let formElementIdentifier in this.state.DNAForm) {\n            formData[formElementIdentifier] = this.state.DNAForm[formElementIdentifier].value;\n        }\n        console.log(formData);\n        this.props.DNA.push(formData);\n    }\n\n    checkValidity(value, rules){\n        let isValid = true;\n        if(rules.required){\n            isValid = value.trim() !== '' && isValid;\n        }\n        if(rules.minLength){\n            isValid = value.length >= rules.minLength && isValid;\n        }\n        return isValid\n    }\n\n    checkValidityChar(value, rules){\n        let isValidChar = false;\n        if(rules.validChar){\n            if(/^[A-Z]+$/.test(value)){\n                isValidChar = true;\n            }\n        }\n        return isValidChar\n    }\n\n\n    inputChangedHandler = (event, inputIdentifier) => {\n        const updatedForm = {\n            ...this.state.DNAForm\n        };\n        const updatedFormElement = { \n            ...updatedForm[inputIdentifier]\n        };\n        updatedFormElement.value = event.target.value;\n        updatedFormElement.valid = this.checkValidity(updatedFormElement.value,updatedFormElement.validation);\n        updatedFormElement.validChar  =this.checkValidityChar(updatedFormElement.value,updatedFormElement.validation);\n        updatedForm[inputIdentifier] = updatedFormElement;\n        this.setState({DNAForm: updatedForm});\n\n    }\n\n    render(){\n       \n\n        const formElementsArray = [];\n        for (let key in this.state.DNAForm) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.DNAForm[key]\n            });\n        }\n        let form = (\n            <form onSubmit={this.addHandler}>\n                <p className={classes.Label}>Enter DNA name, description and sequence</p>\n                {formElementsArray.map(formElement => (\n                    <Input \n                        key={formElement.id}\n                        elementType={formElement.config.elementType}\n                        elementConfig={formElement.config.elementConfig}\n                        value={formElement.config.value}\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)}\n                        invalid ={!formElement.config.valid}\n                    />\n                ))}\n                <Button>Submit</Button>\n            </form>\n\n        );\n        return(\n            <div className={classes.FormLayout}>\n                {form}\n            </div>\n        );\n    }\n}\n\nexport default AddDNA;"]},"metadata":{},"sourceType":"module"}