{"ast":null,"code":"import _defineProperty from \"/Users/lingessrajoo/Desktop/GinkgoBioworks/visualizeDNA/visual-dna/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/lingessrajoo/Desktop/GinkgoBioworks/visualizeDNA/visual-dna/src/Containers/Interface/AddDNA/AddDNA.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport Input from '../../../Components/Input/Input';\nimport Button from '../../../Components/Button/Button';\nimport classes from './AddDNA.module.css';\n\nclass AddDNA extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      DNAForm: {\n        sequenceName: {\n          name: 'sequence name (Ex. AF016541.1) ',\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Sequence Name'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 4,\n            validChar: false,\n            sequenceExists: false\n          },\n          valid: false,\n          touched: false\n        },\n        sequenceDescription: {\n          name: 'sequence description (Ex. Cloning vector pUC-JK, complete sequence)',\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Sequence Description'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 10,\n            validChar: false,\n            sequenceExists: false\n          },\n          valid: false,\n          touched: false\n        },\n        sequenceDNA: {\n          name: 'sequence (Ex. TCGCGCGTTTCG...)',\n          elementType: 'textarea',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'DNA Sequence'\n          },\n          value: '',\n          validation: {\n            required: true,\n            validChar: true,\n            minLength: 4\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      formIsValid: false\n    };\n\n    this.addHandler = event => {\n      event.preventDefault();\n      const formData = {};\n\n      for (let formElementIdentifier in this.state.DNAForm) {\n        formData[formElementIdentifier] = this.state.DNAForm[formElementIdentifier].value;\n      }\n\n      if (this.props.DNA.length > 0) {\n        for (let key in this.props.DNA) {\n          console.log(this.props.DNA[key].sequenceDNA);\n\n          if (this.props.DNA[key].sequenceDNA == formData.sequenceDNA) {\n            console.log(\"exists\");\n          }\n        }\n      } else {\n        this.props.DNA.push(formData);\n      }\n    };\n\n    this.inputChangedHandler = (event, inputIdentifier) => {\n      const updatedForm = _objectSpread({}, this.state.DNAForm);\n\n      const updatedFormElement = _objectSpread({}, updatedForm[inputIdentifier]);\n\n      updatedFormElement.value = event.target.value;\n      updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n      updatedFormElement.touched = true;\n      updatedForm[inputIdentifier] = updatedFormElement;\n      let formIsValid = true;\n\n      for (let inputIdentifier in updatedForm) {\n        formIsValid = updatedForm[inputIdentifier].valid && formIsValid;\n      }\n\n      this.setState({\n        DNAForm: updatedForm,\n        formIsValid: formIsValid\n      });\n    };\n  }\n\n  checkValidity(value, rules) {\n    let isValid = true;\n\n    if (rules.required) {\n      isValid = value.trim() !== '' && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.validChar) {\n      isValid = /^[A-Z]+$/.test(value) && isValid;\n    } //console.log(this.props.DNA);\n\n\n    return isValid;\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.DNAForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.DNAForm[key]\n      });\n    }\n\n    let buttonStatus = null;\n\n    if (this.state.formIsValid) {\n      buttonStatus = 'Success';\n    }\n\n    let form = React.createElement(\"form\", {\n      onSubmit: this.addHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: classes.Label,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, \"Enter DNA name, description and sequence\"), formElementsArray.map(formElement => React.createElement(Input, {\n      name: formElement.config.name,\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      changed: event => this.inputChangedHandler(event, formElement.id),\n      invalid: !formElement.config.valid,\n      touched: formElement.config.touched,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    })), React.createElement(Button, {\n      disabled: !this.state.formIsValid,\n      btnType: buttonStatus,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, \"Submit\"));\n    return React.createElement(\"div\", {\n      className: classes.FormLayout,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, form);\n  }\n\n}\n\nexport default AddDNA;","map":{"version":3,"sources":["/Users/lingessrajoo/Desktop/GinkgoBioworks/visualizeDNA/visual-dna/src/Containers/Interface/AddDNA/AddDNA.js"],"names":["React","Component","Input","Button","classes","AddDNA","state","DNAForm","sequenceName","name","elementType","elementConfig","type","placeholder","value","validation","required","minLength","validChar","sequenceExists","valid","touched","sequenceDescription","sequenceDNA","formIsValid","addHandler","event","preventDefault","formData","formElementIdentifier","props","DNA","length","key","console","log","push","inputChangedHandler","inputIdentifier","updatedForm","updatedFormElement","target","checkValidity","setState","rules","isValid","trim","test","render","formElementsArray","id","config","buttonStatus","form","Label","map","formElement","FormLayout"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport Input from '../../../Components/Input/Input';\nimport Button from '../../../Components/Button/Button';\n\nimport classes from './AddDNA.module.css';\n\nclass AddDNA extends Component {\n    state = {\n        DNAForm: {\n            sequenceName: {\n                name: 'sequence name (Ex. AF016541.1) ',\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Sequence Name'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 4,\n                    validChar: false,\n                    sequenceExists: false\n                },\n                valid: false,\n                touched: false\n            },\n            sequenceDescription: {\n                name: 'sequence description (Ex. Cloning vector pUC-JK, complete sequence)',\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Sequence Description'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 10,\n                    validChar: false,\n                    sequenceExists: false\n                },\n                valid: false,\n                touched: false\n            },\n            sequenceDNA: {\n                name: 'sequence (Ex. TCGCGCGTTTCG...)',\n                elementType: 'textarea',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'DNA Sequence'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    validChar: true,\n                    minLength: 4\n                },\n                valid: false,\n                touched: false,\n                \n            }\n        },\n        formIsValid: false\n    }\n    \n    addHandler = (event) => {\n        event.preventDefault();\n        const formData = {};\n        for (let formElementIdentifier in this.state.DNAForm) {\n            formData[formElementIdentifier] = this.state.DNAForm[formElementIdentifier].value;\n        }\n        if(this.props.DNA.length > 0){\n            for(let key in this.props.DNA){\n                console.log(this.props.DNA[key].sequenceDNA);\n                if(this.props.DNA[key].sequenceDNA == formData.sequenceDNA){\n                    console.log(\"exists\");\n                    \n                }\n            }\n        }else{\n            this.props.DNA.push(formData);\n        }\n    }\n\n    checkValidity(value, rules){\n\n        let isValid = true;\n\n        if(rules.required){\n            isValid = value.trim() !== '' && isValid;\n        }\n        if(rules.minLength){\n            isValid = value.length >= rules.minLength && isValid;\n        }\n        if(rules.validChar){\n            isValid = /^[A-Z]+$/.test(value) && isValid;   \n        }\n        //console.log(this.props.DNA);\n\n        return isValid\n    }\n\n    inputChangedHandler = (event, inputIdentifier) => {\n        const updatedForm = {\n            ...this.state.DNAForm\n        };\n        const updatedFormElement = { \n            ...updatedForm[inputIdentifier]\n        };\n        updatedFormElement.value = event.target.value;\n        updatedFormElement.valid = this.checkValidity(updatedFormElement.value,updatedFormElement.validation);\n        updatedFormElement.touched = true;\n        updatedForm[inputIdentifier] = updatedFormElement;\n        let formIsValid = true;\n        for(let inputIdentifier in updatedForm){\n            formIsValid = updatedForm[inputIdentifier].valid && formIsValid;\n        }\n        this.setState({DNAForm: updatedForm, formIsValid: formIsValid});\n    }\n\n    render(){\n       \n\n        const formElementsArray = [];\n        for (let key in this.state.DNAForm) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.DNAForm[key]\n            });\n        }\n        let buttonStatus = null;\n        if(this.state.formIsValid){\n            buttonStatus='Success';\n        }\n        let form = (\n            <form onSubmit={this.addHandler}>\n                <p className={classes.Label}>Enter DNA name, description and sequence</p>\n                {formElementsArray.map(formElement => (\n                            <Input \n                                name={formElement.config.name}\n                                key={formElement.id}\n                                elementType={formElement.config.elementType}\n                                elementConfig={formElement.config.elementConfig}\n                                value={formElement.config.value}\n                                changed={(event) => this.inputChangedHandler(event, formElement.id)}\n                                invalid ={!formElement.config.valid}\n                                touched={formElement.config.touched}          \n                            />\n                        )\n                    \n                )}\n                <Button disabled={!this.state.formIsValid} btnType={buttonStatus}>Submit</Button>\n            </form>\n\n        );\n        return(\n            <div className={classes.FormLayout}>\n                {form}\n            </div>\n        );\n    }\n}\n\nexport default AddDNA;"]},"metadata":{},"sourceType":"module"}