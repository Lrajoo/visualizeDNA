{"ast":null,"code":"import _defineProperty from \"/Users/lingessrajoo/Desktop/GinkgoBioworks/visualizeDNA/visual-dna/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/lingessrajoo/Desktop/GinkgoBioworks/visualizeDNA/visual-dna/src/Containers/Interface/AddDNA/AddDNA.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport Input from '../../../Components/Input/Input';\nimport Button from '../../../Components/Button/Button';\nimport classes from './AddDNA.module.css';\n\nclass AddDNA extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      DNAForm: {\n        sequenceName: {\n          name: 'sequence name (Ex. AF016541.1) ',\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Sequence Name'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 8,\n            validChar: false\n          },\n          valid: false,\n          touched: false\n        },\n        sequenceDescription: {\n          name: 'sequence description (Ex. Cloning vector pUC-JK, complete sequence)',\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Sequence Description'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 17,\n            validChar: false\n          },\n          valid: false,\n          touched: false\n        },\n        sequenceDNA: {\n          name: 'sequence (Ex. TCGCGCGTTTCG...)',\n          elementType: 'textarea',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'DNA Sequence'\n          },\n          value: '',\n          validation: {\n            required: true,\n            validChar: true\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      formIsValid: false\n    };\n\n    this.addHandler = event => {\n      event.preventDefault();\n      const formData = {};\n\n      for (let formElementIdentifier in this.state.DNAForm) {\n        formData[formElementIdentifier] = this.state.DNAForm[formElementIdentifier].value;\n      }\n\n      console.log(formData);\n      this.props.DNA.push(formData);\n    };\n\n    this.inputChangedHandler = (event, inputIdentifier) => {\n      const updatedForm = _objectSpread({}, this.state.DNAForm);\n\n      const updatedFormElement = _objectSpread({}, updatedForm[inputIdentifier]);\n\n      updatedFormElement.value = event.target.value;\n      updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n      updatedFormElement.validChar = this.checkValidityChar(updatedFormElement.value, updatedFormElement.validation);\n      updatedFormElement.touched = true;\n      updatedForm[inputIdentifier] = updatedFormElement;\n      const formIsValid = true;\n\n      for (let inputIdentifier in updatedForm) {\n        formIsValid = updatedForm[inputIdentifier].valid && formIsValid;\n      }\n\n      this.setState({\n        DNAForm: updatedForm,\n        formIsValid: formIsValid\n      });\n    };\n  }\n\n  checkValidity(value, rules) {\n    let isValid = true;\n    if (rules.validChar) if (rules.required) {\n      isValid = value.trim() !== '' && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    return isValid;\n  }\n\n  checkValidityChar(value, rules) {\n    let isValidChar = false;\n\n    if (rules.validChar) {\n      if (/^[A-Z]+$/.test(value)) {\n        isValidChar = true;\n      }\n    }\n\n    return isValidChar;\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.DNAForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.DNAForm[key]\n      });\n    }\n\n    let form = React.createElement(\"form\", {\n      onSubmit: this.addHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: classes.Label,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, \"Enter DNA name, description and sequence\"), formElementsArray.map(formElement => {\n      if (formElement.config.elementType == 'textarea') {\n        return React.createElement(Input, {\n          name: formElement.config.name,\n          key: formElement.id,\n          elementType: formElement.config.elementType,\n          elementConfig: formElement.config.elementConfig,\n          value: formElement.config.value,\n          changed: event => this.inputChangedHandler(event, formElement.id),\n          invalid: !formElement.config.validChar,\n          touched: formElement.config.touched,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132\n          },\n          __self: this\n        });\n      } else {\n        return React.createElement(Input, {\n          name: formElement.config.name,\n          key: formElement.id,\n          elementType: formElement.config.elementType,\n          elementConfig: formElement.config.elementConfig,\n          value: formElement.config.value,\n          changed: event => this.inputChangedHandler(event, formElement.id),\n          invalid: !formElement.config.valid,\n          touched: formElement.config.touched,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 145\n          },\n          __self: this\n        });\n      }\n    }), React.createElement(Button, {\n      disabled: !this.state.formIsValid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, \"Submit\"));\n    return React.createElement(\"div\", {\n      className: classes.FormLayout,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, form);\n  }\n\n}\n\nexport default AddDNA;","map":{"version":3,"sources":["/Users/lingessrajoo/Desktop/GinkgoBioworks/visualizeDNA/visual-dna/src/Containers/Interface/AddDNA/AddDNA.js"],"names":["React","Component","Input","Button","classes","AddDNA","state","DNAForm","sequenceName","name","elementType","elementConfig","type","placeholder","value","validation","required","minLength","validChar","valid","touched","sequenceDescription","sequenceDNA","formIsValid","addHandler","event","preventDefault","formData","formElementIdentifier","console","log","props","DNA","push","inputChangedHandler","inputIdentifier","updatedForm","updatedFormElement","target","checkValidity","checkValidityChar","setState","rules","isValid","trim","length","isValidChar","test","render","formElementsArray","key","id","config","form","Label","map","formElement","FormLayout"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport Input from '../../../Components/Input/Input';\nimport Button from '../../../Components/Button/Button';\n\nimport classes from './AddDNA.module.css';\n\nclass AddDNA extends Component {\n    state = {\n        DNAForm: {\n            sequenceName: {\n                name: 'sequence name (Ex. AF016541.1) ',\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Sequence Name'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 8,\n                    validChar: false\n                },\n                valid: false,\n                touched: false\n            },\n            sequenceDescription: {\n                name: 'sequence description (Ex. Cloning vector pUC-JK, complete sequence)',\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Sequence Description'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 17,\n                    validChar: false\n                },\n                valid: false,\n                touched: false\n            },\n            sequenceDNA: {\n                name: 'sequence (Ex. TCGCGCGTTTCG...)',\n                elementType: 'textarea',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'DNA Sequence'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    validChar: true\n                },\n                valid: false,\n                touched: false\n            }\n        },\n        formIsValid: false\n    }\n    \n    addHandler = (event) => {\n        event.preventDefault();\n        const formData = {};\n        for (let formElementIdentifier in this.state.DNAForm) {\n            formData[formElementIdentifier] = this.state.DNAForm[formElementIdentifier].value;\n        }\n        console.log(formData);\n        this.props.DNA.push(formData);\n    }\n\n    checkValidity(value, rules){\n\n        let isValid = true;\n        if(rules.validChar)\n        if(rules.required){\n            isValid = value.trim() !== '' && isValid;\n        }\n        if(rules.minLength){\n            isValid = value.length >= rules.minLength && isValid;\n        }\n        \n        return isValid\n    }\n\n    checkValidityChar(value, rules){\n        let isValidChar = false;\n        if(rules.validChar){\n            if(/^[A-Z]+$/.test(value)){\n                isValidChar = true;\n            }\n        }\n        return isValidChar\n    }\n\n\n    inputChangedHandler = (event, inputIdentifier) => {\n        const updatedForm = {\n            ...this.state.DNAForm\n        };\n        const updatedFormElement = { \n            ...updatedForm[inputIdentifier]\n        };\n        updatedFormElement.value = event.target.value;\n        updatedFormElement.valid = this.checkValidity(updatedFormElement.value,updatedFormElement.validation);\n        updatedFormElement.validChar = this.checkValidityChar(updatedFormElement.value,updatedFormElement.validation);\n        updatedFormElement.touched = true;\n        updatedForm[inputIdentifier] = updatedFormElement;\n        const formIsValid = true;\n        for(let inputIdentifier in updatedForm){\n            formIsValid = updatedForm[inputIdentifier].valid && formIsValid;\n        }\n        this.setState({DNAForm: updatedForm, formIsValid: formIsValid});\n    }\n\n    render(){\n       \n\n        const formElementsArray = [];\n        for (let key in this.state.DNAForm) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.DNAForm[key]\n            });\n        }\n        let form = (\n            <form onSubmit={this.addHandler}>\n                <p className={classes.Label}>Enter DNA name, description and sequence</p>\n                {formElementsArray.map(formElement => {\n                    if(formElement.config.elementType == 'textarea'){\n                        return (\n                            <Input \n                                name={formElement.config.name}\n                                key={formElement.id}\n                                elementType={formElement.config.elementType}\n                                elementConfig={formElement.config.elementConfig}\n                                value={formElement.config.value}\n                                changed={(event) => this.inputChangedHandler(event, formElement.id)}\n                                invalid ={!formElement.config.validChar}\n                                touched={formElement.config.touched}\n                            />\n                        )\n                    }else{\n                        return(\n                            <Input \n                                name={formElement.config.name}\n                                key={formElement.id}\n                                elementType={formElement.config.elementType}\n                                elementConfig={formElement.config.elementConfig}\n                                value={formElement.config.value}\n                                changed={(event) => this.inputChangedHandler(event, formElement.id)}\n                                invalid ={!formElement.config.valid}\n                                touched={formElement.config.touched}\n                            />\n                        )\n                    }\n                })}\n                <Button disabled={!this.state.formIsValid}>Submit</Button>\n            </form>\n\n        );\n        return(\n            <div className={classes.FormLayout}>\n                {form}\n            </div>\n        );\n    }\n}\n\nexport default AddDNA;"]},"metadata":{},"sourceType":"module"}