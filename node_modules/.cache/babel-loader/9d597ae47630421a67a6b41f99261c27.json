{"ast":null,"code":"import _defineProperty from\"/Users/lingessrajoo/Desktop/Documents/Work/Ginkgo Bioworks/visualizeDNA/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _classCallCheck from\"/Users/lingessrajoo/Desktop/Documents/Work/Ginkgo Bioworks/visualizeDNA/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/lingessrajoo/Desktop/Documents/Work/Ginkgo Bioworks/visualizeDNA/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/lingessrajoo/Desktop/Documents/Work/Ginkgo Bioworks/visualizeDNA/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/lingessrajoo/Desktop/Documents/Work/Ginkgo Bioworks/visualizeDNA/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/Users/lingessrajoo/Desktop/Documents/Work/Ginkgo Bioworks/visualizeDNA/node_modules/@babel/runtime/helpers/esm/inherits\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(source,true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(source).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import React,{Component}from'react';import Input from'../../../Components/Input/Input';import Button from'../../../Components/Button/Button';import classes from'./AddDNA.module.css';var AddDNA=/*#__PURE__*/function(_Component){_inherits(AddDNA,_Component);function AddDNA(){var _getPrototypeOf2;var _this;_classCallCheck(this,AddDNA);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(AddDNA)).call.apply(_getPrototypeOf2,[this].concat(args)));_this.state={DNAForm:{sequenceName:{name:'sequence name (Ex. AF016541.1) ',elementType:'input',elementConfig:{type:'text',placeholder:'Sequence Name'},value:'',validation:{required:true,minLength:4,validChar:false,sequenceExists:false},valid:false,touched:false},sequenceDescription:{name:'sequence description (Ex. Cloning vector pUC-JK, complete sequence)',elementType:'input',elementConfig:{type:'text',placeholder:'Sequence Description'},value:'',validation:{required:true,minLength:10,validChar:false,sequenceExists:false},valid:false,touched:false},sequenceDNA:{name:'sequence (Ex. TCGCGCGTTTCG...) or sequence already exists',elementType:'textarea',elementConfig:{type:'text',placeholder:'DNA Sequence'},value:'',validation:{required:true,validChar:true,minLength:4,sequenceExists:true},valid:false,touched:false,exists:false}},formIsValid:false};_this.addHandler=function(event){event.preventDefault();var formData={};for(var formElementIdentifier in _this.state.DNAForm){formData[formElementIdentifier]=_this.state.DNAForm[formElementIdentifier].value;}_this.props.DNA.push(formData);_this.setState({DNAForm:{sequenceName:{name:'sequence name (Ex. AF016541.1) ',elementType:'input',elementConfig:{type:'text',placeholder:'Sequence Name'},value:'',validation:{required:true,minLength:4,validChar:false,sequenceExists:false},valid:false,touched:false},sequenceDescription:{name:'sequence description (Ex. Cloning vector pUC-JK, complete sequence)',elementType:'input',elementConfig:{type:'text',placeholder:'Sequence Description'},value:'',validation:{required:true,minLength:10,validChar:false,sequenceExists:false},valid:false,touched:false},sequenceDNA:{name:'sequence (Ex. TCGCGCGTTTCG...) or sequence already exists',elementType:'textarea',elementConfig:{type:'text',placeholder:'DNA Sequence'},value:'',validation:{required:true,validChar:true,minLength:4,sequenceExists:true},valid:false,touched:false,exists:false}}});};_this.inputChangedHandler=function(event,inputIdentifier){var updatedForm=_objectSpread({},_this.state.DNAForm);var updatedFormElement=_objectSpread({},updatedForm[inputIdentifier]);updatedFormElement.value=event.target.value;updatedFormElement.valid=_this.checkValidity(updatedFormElement.value,updatedFormElement.validation);updatedFormElement.touched=true;updatedForm[inputIdentifier]=updatedFormElement;var formIsValid=true;for(var _inputIdentifier in updatedForm){formIsValid=updatedForm[_inputIdentifier].valid&&formIsValid;}_this.setState({DNAForm:updatedForm,formIsValid:formIsValid});};return _this;}_createClass(AddDNA,[{key:\"checkValidity\",value:function checkValidity(value,rules){var isValid=true;if(rules.required){isValid=value.trim()!==''&&isValid;}if(rules.minLength){isValid=value.length>=rules.minLength&&isValid;}if(rules.validChar){isValid=/^[A-Z]+$/.test(value)&&isValid;}if(rules.sequenceExists){var exists=false;if(this.props.DNA.length>0){for(var key in this.props.DNA){if(this.props.DNA[key].sequenceDNA===value){exists=true;}}isValid=!exists&&isValid;}}return isValid;}},{key:\"render\",value:function render(){var _this2=this;var formElementsArray=[];for(var key in this.state.DNAForm){formElementsArray.push({id:key,config:this.state.DNAForm[key]});}var buttonStatus=null;if(this.state.formIsValid){buttonStatus='Success';}var form=React.createElement(\"form\",{onSubmit:this.addHandler},React.createElement(\"p\",{className:classes.Label},\"Enter DNA name, description and sequence\"),formElementsArray.map(function(formElement){return React.createElement(Input,{name:formElement.config.name,key:formElement.id,elementType:formElement.config.elementType,elementConfig:formElement.config.elementConfig,value:formElement.config.value,changed:function changed(event){return _this2.inputChangedHandler(event,formElement.id);},invalid:!formElement.config.valid,touched:formElement.config.touched});}),React.createElement(Button,{disabled:!this.state.formIsValid,btnType:buttonStatus},\"Submit\"));return React.createElement(\"div\",{className:classes.FormLayout},form);}}]);return AddDNA;}(Component);export default AddDNA;","map":{"version":3,"sources":["/Users/lingessrajoo/Desktop/Documents/Work/Ginkgo Bioworks/visualizeDNA/src/Containers/Interface/AddDNA/AddDNA.js"],"names":["React","Component","Input","Button","classes","AddDNA","state","DNAForm","sequenceName","name","elementType","elementConfig","type","placeholder","value","validation","required","minLength","validChar","sequenceExists","valid","touched","sequenceDescription","sequenceDNA","exists","formIsValid","addHandler","event","preventDefault","formData","formElementIdentifier","props","DNA","push","setState","inputChangedHandler","inputIdentifier","updatedForm","updatedFormElement","target","checkValidity","rules","isValid","trim","length","test","key","formElementsArray","id","config","buttonStatus","form","Label","map","formElement","FormLayout"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport Input from '../../../Components/Input/Input';\nimport Button from '../../../Components/Button/Button';\n\nimport classes from './AddDNA.module.css';\n\nclass AddDNA extends Component {\n    state = {\n        DNAForm: {\n            sequenceName: {\n                name: 'sequence name (Ex. AF016541.1) ',\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Sequence Name'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 4,\n                    validChar: false,\n                    sequenceExists: false\n                },\n                valid: false,\n                touched: false\n            },\n            sequenceDescription: {\n                name: 'sequence description (Ex. Cloning vector pUC-JK, complete sequence)',\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Sequence Description'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 10,\n                    validChar: false,\n                    sequenceExists: false\n                },\n                valid: false,\n                touched: false\n            },\n            sequenceDNA: {\n                name: 'sequence (Ex. TCGCGCGTTTCG...) or sequence already exists',\n                elementType: 'textarea',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'DNA Sequence'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    validChar: true,\n                    minLength: 4,\n                    sequenceExists: true\n                },\n                valid: false,\n                touched: false,\n                exists: false\n                \n            }\n        },\n        formIsValid: false\n    }\n    \n    addHandler = (event) => {\n        event.preventDefault();\n        const formData = {};\n        for (let formElementIdentifier in this.state.DNAForm) {\n            formData[formElementIdentifier] = this.state.DNAForm[formElementIdentifier].value;\n        }\n        this.props.DNA.push(formData);\n        this.setState({\n            DNAForm: {\n                sequenceName: {\n                    name: 'sequence name (Ex. AF016541.1) ',\n                    elementType: 'input',\n                    elementConfig: {\n                    type: 'text',\n                    placeholder: 'Sequence Name'\n                    },\n                    value: '',\n                    validation: {\n                        required: true,\n                        minLength: 4,\n                        validChar: false,\n                        sequenceExists: false\n                    },\n                    valid: false,\n                    touched: false\n                },\n                sequenceDescription: {\n                    name: 'sequence description (Ex. Cloning vector pUC-JK, complete sequence)',\n                    elementType: 'input',\n                    elementConfig: {\n                        type: 'text',\n                        placeholder: 'Sequence Description'\n                    },\n                    value: '',\n                    validation: {\n                        required: true,\n                        minLength: 10,\n                        validChar: false,\n                        sequenceExists: false\n                    },\n                    valid: false,\n                    touched: false\n                },\n                sequenceDNA: {\n                    name: 'sequence (Ex. TCGCGCGTTTCG...) or sequence already exists',\n                    elementType: 'textarea',\n                    elementConfig: {\n                        type: 'text',\n                        placeholder: 'DNA Sequence'\n                    },\n                    value: '',\n                    validation: {\n                        required: true,\n                        validChar: true,\n                        minLength: 4,\n                        sequenceExists: true\n                    },\n                    valid: false,\n                    touched: false,\n                    exists: false\n                    \n                }\n            }\n        })\n    }\n\n    checkValidity(value, rules,){\n\n        let isValid = true;\n\n        if(rules.required){\n            isValid = value.trim() !== '' && isValid;\n        }\n        if(rules.minLength){\n            isValid = value.length >= rules.minLength && isValid;\n        }\n        if(rules.validChar){\n            isValid = /^[A-Z]+$/.test(value) && isValid;   \n        }\n        if(rules.sequenceExists){\n            let exists = false;\n            if(this.props.DNA.length > 0){\n                for(let key in this.props.DNA){\n                    if(this.props.DNA[key].sequenceDNA === value){\n                        exists = true;\n                    }\n                }\n                isValid = !exists && isValid;\n            }\n        }\n        return isValid;\n    }\n    \n\n    inputChangedHandler = (event, inputIdentifier) => {\n        const updatedForm = {\n            ...this.state.DNAForm\n        };\n        const updatedFormElement = { \n            ...updatedForm[inputIdentifier]\n        };\n        updatedFormElement.value = event.target.value;\n        updatedFormElement.valid = this.checkValidity(updatedFormElement.value,updatedFormElement.validation);\n        updatedFormElement.touched = true;\n        updatedForm[inputIdentifier] = updatedFormElement;\n        let formIsValid = true;\n        for(let inputIdentifier in updatedForm){\n            formIsValid = updatedForm[inputIdentifier].valid && formIsValid;\n        }\n        \n        this.setState({DNAForm: updatedForm, formIsValid: formIsValid});\n    }\n\n    render(){\n       \n\n        const formElementsArray = [];\n        for (let key in this.state.DNAForm) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.DNAForm[key]\n            });\n        }\n        let buttonStatus = null;\n        if(this.state.formIsValid){\n            buttonStatus='Success';\n        }\n        let form = (\n            <form onSubmit={this.addHandler}>\n                <p className={classes.Label}>Enter DNA name, description and sequence</p>\n                {formElementsArray.map(formElement => (\n                            <Input \n                                name={formElement.config.name}\n                                key={formElement.id}\n                                elementType={formElement.config.elementType}\n                                elementConfig={formElement.config.elementConfig}\n                                value={formElement.config.value}\n                                changed={(event) => this.inputChangedHandler(event, formElement.id)}\n                                invalid ={!formElement.config.valid}\n                                touched={formElement.config.touched}      \n                            />\n                        )\n                    \n                )}\n                <Button disabled={!this.state.formIsValid} btnType={buttonStatus}>Submit</Button>\n            </form>\n\n        );\n        return(\n            <div className={classes.FormLayout}>\n                {form}\n            </div>\n        );\n    }\n}\n\nexport default AddDNA;"]},"metadata":{},"sourceType":"module"}