{"ast":null,"code":"import _defineProperty from \"/Users/lingessrajoo/Desktop/visualizeDNA/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/lingessrajoo/Desktop/visualizeDNA/src/Containers/Interface/ViewDNA/ViewDNA.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport Modal from '../../../Components/Modal/Modal';\nimport Button from '../../../Components/Button/Button';\nimport DNA from '../../../Components/DNA/DNA';\nimport classes from './ViewDNA.module.css';\nimport Input from '../../../Components/Input/Input';\nimport Summary from '../../../Components/Summary/Summary';\n\nclass ViewDNA extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      search: {\n        name: 'Search',\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Search Sequence Name'\n        },\n        value: ''\n      },\n      sorted: false,\n      show: false,\n      sequence: ''\n    };\n\n    this.inputChangedHandler = event => {\n      const search = _objectSpread({}, this.state.search);\n\n      search.value = event.target.value;\n      this.setState({\n        search: search\n      });\n      this.setState({\n        sorted: false\n      });\n    };\n\n    this.sortSequenceName = () => {\n      function mySorter(a, b) {\n        let x = a.sequenceName.toLowerCase();\n        let y = b.sequenceName.toLowerCase();\n        return x < y ? -1 : x > y ? 1 : 0;\n      }\n\n      this.props.DNA.sort(mySorter);\n      this.setState({\n        sorted: true\n      });\n    };\n\n    this.showSequence = () => {\n      this.setState({\n        show: true\n      });\n      console.log(\"showSequence\");\n      console.log(this.state.show);\n    };\n  }\n\n  render() {\n    let controls = null;\n    let listDNA = null;\n\n    if (this.props.DNA.length > 0) {\n      controls = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, React.createElement(Button, {\n        btnType: 'Sort',\n        clicked: this.sortSequenceName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, \"Sort\"), React.createElement(Input, {\n        invalid: false,\n        touched: false,\n        elementType: this.state.elementType,\n        name: this.state.name,\n        elementConfig: this.state.elementConfig,\n        value: this.state.value,\n        changed: event => this.inputChangedHandler(event),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }));\n    }\n\n    if (this.props.DNA.length > 0 && this.state.search.value === '' || this.state.sorted) {\n      listDNA = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, this.props.DNA.map(dna => {\n        return React.createElement(DNA, {\n          id: dna,\n          name: dna.sequenceName,\n          description: dna.sequenceDescription,\n          sequence: dna.sequenceDNA,\n          show: this.showSequence,\n          seq: this.state.sequence,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78\n          },\n          __self: this\n        });\n      }));\n    } else if (this.state.search.value !== '') {\n      let searchArr = [];\n\n      for (let key in this.props.DNA) {\n        let currName = this.props.DNA[key].sequenceName;\n        let check = currName.includes(this.state.search.value);\n\n        if (check) {\n          searchArr.push(key);\n        }\n      }\n\n      listDNA = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, searchArr.map(key => {\n        return React.createElement(DNA, {\n          id: key,\n          name: this.props.DNA[key].sequenceName,\n          description: this.props.DNA[key].sequenceDescription,\n          sequence: this.props.DNA[key].sequenceDNA,\n          show: this.showSequence,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102\n          },\n          __self: this\n        });\n      }));\n      searchArr = [];\n    } else {\n      listDNA = React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, \"No DNA samples have been added.\");\n    }\n\n    let summary = null;\n\n    if (this.state.show) {\n      console.log(\"summary has the sequence\");\n      console.log(this.state.sequence);\n      summary = React.createElement(Summary, {\n        seq: 'JKHSFJDFHKDSHFDSKJFHJDSJKF',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      className: classes.View,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, controls, listDNA, React.createElement(Modal, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, summary));\n  }\n\n}\n\nexport default ViewDNA;","map":{"version":3,"sources":["/Users/lingessrajoo/Desktop/visualizeDNA/src/Containers/Interface/ViewDNA/ViewDNA.js"],"names":["React","Component","Modal","Button","DNA","classes","Input","Summary","ViewDNA","state","search","name","elementType","elementConfig","type","placeholder","value","sorted","show","sequence","inputChangedHandler","event","target","setState","sortSequenceName","mySorter","a","b","x","sequenceName","toLowerCase","y","props","sort","showSequence","console","log","render","controls","listDNA","length","map","dna","sequenceDescription","sequenceDNA","searchArr","key","currName","check","includes","push","summary","View"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Modal from '../../../Components/Modal/Modal';\nimport Button from '../../../Components/Button/Button';\nimport DNA from '../../../Components/DNA/DNA';\nimport classes from './ViewDNA.module.css';\nimport Input from '../../../Components/Input/Input';\nimport Summary from '../../../Components/Summary/Summary';\n\nclass ViewDNA extends Component {\n    state = {\n        search: {\n            name: 'Search',\n            elementType: 'input',\n            elementConfig: {\n                type: 'text',\n                placeholder: 'Search Sequence Name'\n            },\n            value: ''\n        },\n        sorted: false,\n        show: false,\n        sequence: ''\n    }\n\n    inputChangedHandler = (event) => {\n        const search = {\n            ...this.state.search\n        };\n        search.value = event.target.value;\n        this.setState({search: search});\n        this.setState({sorted: false});\n    }\n\n    sortSequenceName = () => {\n        function mySorter(a, b) {\n            let x = a.sequenceName.toLowerCase();\n            let y = b.sequenceName.toLowerCase();\n            return ((x < y) ? -1 : ((x > y) ? 1 : 0));\n        }\n        this.props.DNA.sort(mySorter);\n        this.setState({sorted: true});\n    }\n\n    showSequence = () => {\n        this.setState({show: true});\n        console.log(\"showSequence\");\n        console.log(this.state.show);\n\n    }\n    \n    \n   \n\n    render(){\n        let controls = null;\n        let listDNA = null;\n        if(this.props.DNA.length > 0){\n            controls =(\n                <div>\n                    <Button btnType={'Sort'} clicked={this.sortSequenceName}>Sort</Button>\n                    <Input\n                        invalid={false}\n                        touched={false}\n                        elementType={this.state.elementType}\n                        name={this.state.name}\n                        elementConfig={this.state.elementConfig}\n                        value={this.state.value}\n                        changed={(event) => this.inputChangedHandler(event)}\n                    />\n                </div>\n            );\n        }\n        if(this.props.DNA.length > 0 && this.state.search.value === '' || this.state.sorted){\n   \n            listDNA = (\n                <div>\n                    {this.props.DNA.map(dna => {\n                        return <DNA \n                                    id={dna}\n                                    name={dna.sequenceName} \n                                    description={dna.sequenceDescription} \n                                    sequence={dna.sequenceDNA}\n                                    show={this.showSequence}\n                                    seq={this.state.sequence}\n                                />\n                    })}\n                </div>\n            );\n        }else if(this.state.search.value !== ''){\n            let searchArr = [];\n            for(let key in this.props.DNA){\n                let currName = this.props.DNA[key].sequenceName;\n                let check = currName.includes(this.state.search.value);\n                if(check){\n                   \n                    searchArr.push(key);\n                }\n            }\n            listDNA = (\n                <div>\n                    {searchArr.map(key => {\n                        return <DNA \n                                    id={key}\n                                    name={this.props.DNA[key].sequenceName} \n                                    description={this.props.DNA[key].sequenceDescription} \n                                    sequence={this.props.DNA[key].sequenceDNA}\n                                    show={this.showSequence}\n                                />\n                    })}\n                    \n                </div>\n            );\n            searchArr = [];\n            \n        }else{\n            listDNA = <h2>No DNA samples have been added.</h2>\n        }\n        let summary  = null;\n        if(this.state.show){\n            console.log(\"summary has the sequence\");\n            console.log(this.state.sequence);\n            summary = (\n                <Summary seq={'JKHSFJDFHKDSHFDSKJFHJDSJKF'}/>\n            );\n        }\n\n        return(\n            <div className={classes.View}>\n                {controls}\n                {listDNA}\n                <Modal>\n                    {summary}\n                </Modal>\n            </div>\n        );\n    }\n}\n\nexport default ViewDNA;"]},"metadata":{},"sourceType":"module"}