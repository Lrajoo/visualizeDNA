{"ast":null,"code":"import _defineProperty from \"/Users/lingessrajoo/Desktop/visualizeDNA/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/lingessrajoo/Desktop/visualizeDNA/src/Containers/Interface/ViewDNA/ViewDNA.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport Modal from '../../../Components/Modal/Modal';\nimport Button from '../../../Components/Button/Button';\nimport DNA from '../../../Components/DNA/DNA';\nimport classes from './ViewDNA.module.css';\nimport Input from '../../../Components/Input/Input';\n\nclass ViewDNA extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      name: 'Search',\n      elementType: 'input',\n      elementConfig: {\n        type: 'text',\n        placeholder: 'Search Sequence Name'\n      },\n      value: ''\n    };\n\n    this.inputChangedHandler = event => {\n      const updatedState = _objectSpread({}, this.state);\n\n      updatedState.value = event.target.value;\n      this.setState({\n        state: updatedState\n      });\n    };\n  }\n\n  render() {\n    let listDNA = null;\n\n    if (this.props.DNA.length > 0) {\n      listDNA = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, React.createElement(Button, {\n        btnType: 'Sort',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, \"Sort\"), React.createElement(Input, {\n        invalid: false,\n        touched: false,\n        elementType: this.state.elementType,\n        name: this.state.name,\n        elementConfig: this.state.elementConfig,\n        value: this.state.value,\n        changed: event => this.inputChangedHandler(event, formElement.id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }), this.props.DNA.map(dna => {\n        return React.createElement(DNA, {\n          name: dna.sequenceName,\n          description: dna.sequenceDescription,\n          sequence: dna.sequenceDNA,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45\n          },\n          __self: this\n        });\n      }));\n    } else {\n      listDNA = React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, \"No DNA samples have been added.\");\n    }\n\n    return React.createElement(\"div\", {\n      className: classes.View,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, listDNA);\n  }\n\n}\n\nexport default ViewDNA;","map":{"version":3,"sources":["/Users/lingessrajoo/Desktop/visualizeDNA/src/Containers/Interface/ViewDNA/ViewDNA.js"],"names":["React","Component","Modal","Button","DNA","classes","Input","ViewDNA","state","name","elementType","elementConfig","type","placeholder","value","inputChangedHandler","event","updatedState","target","setState","render","listDNA","props","length","formElement","id","map","dna","sequenceName","sequenceDescription","sequenceDNA","View"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,iCAAlB;AACA,OAAOC,MAAP,MAAmB,mCAAnB;AACA,OAAOC,GAAP,MAAgB,6BAAhB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,KAAP,MAAkB,iCAAlB;;AAEA,MAAMC,OAAN,SAAsBN,SAAtB,CAAgC;AAAA;AAAA;AAAA,SAC5BO,KAD4B,GACpB;AACJC,MAAAA,IAAI,EAAE,QADF;AAEJC,MAAAA,WAAW,EAAE,OAFT;AAGJC,MAAAA,aAAa,EAAE;AACXC,QAAAA,IAAI,EAAE,MADK;AAEXC,QAAAA,WAAW,EAAE;AAFF,OAHX;AAOJC,MAAAA,KAAK,EAAE;AAPH,KADoB;;AAAA,SAW5BC,mBAX4B,GAWLC,KAAD,IAAW;AAC7B,YAAMC,YAAY,qBACX,KAAKT,KADM,CAAlB;;AAGAS,MAAAA,YAAY,CAACH,KAAb,GAAqBE,KAAK,CAACE,MAAN,CAAaJ,KAAlC;AAEA,WAAKK,QAAL,CAAc;AAACX,QAAAA,KAAK,EAAES;AAAR,OAAd;AACH,KAlB2B;AAAA;;AAoB5BG,EAAAA,MAAM,GAAE;AACJ,QAAIC,OAAO,GAAG,IAAd;;AACA,QAAG,KAAKC,KAAL,CAAWlB,GAAX,CAAemB,MAAf,GAAwB,CAA3B,EAA6B;AACzBF,MAAAA,OAAO,GACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEI,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAE,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,EAGI,oBAAC,KAAD;AACI,QAAA,OAAO,EAAE,KADb;AAEI,QAAA,OAAO,EAAE,KAFb;AAGI,QAAA,WAAW,EAAE,KAAKb,KAAL,CAAWE,WAH5B;AAII,QAAA,IAAI,EAAE,KAAKF,KAAL,CAAWC,IAJrB;AAKI,QAAA,aAAa,EAAE,KAAKD,KAAL,CAAWG,aAL9B;AAMI,QAAA,KAAK,EAAE,KAAKH,KAAL,CAAWM,KANtB;AAOI,QAAA,OAAO,EAAGE,KAAD,IAAW,KAAKD,mBAAL,CAAyBC,KAAzB,EAAgCQ,WAAW,CAACC,EAA5C,CAPxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHJ,EAYK,KAAKH,KAAL,CAAWlB,GAAX,CAAesB,GAAf,CAAmBC,GAAG,IAAI;AACvB,eAAO,oBAAC,GAAD;AACK,UAAA,IAAI,EAAEA,GAAG,CAACC,YADf;AAEK,UAAA,WAAW,EAAED,GAAG,CAACE,mBAFtB;AAGK,UAAA,QAAQ,EAAEF,GAAG,CAACG,WAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAKH,OANA,CAZL,CADJ;AAsBH,KAvBD,MAuBK;AACDT,MAAAA,OAAO,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAAV;AACH;;AAED,WACI;AAAK,MAAA,SAAS,EAAEhB,OAAO,CAAC0B,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKV,OADL,CADJ;AAKH;;AAtD2B;;AAyDhC,eAAed,OAAf","sourcesContent":["import React, { Component } from 'react';\nimport Modal from '../../../Components/Modal/Modal';\nimport Button from '../../../Components/Button/Button';\nimport DNA from '../../../Components/DNA/DNA';\nimport classes from './ViewDNA.module.css';\nimport Input from '../../../Components/Input/Input';\n\nclass ViewDNA extends Component {\n    state = {\n        name: 'Search',\n        elementType: 'input',\n        elementConfig: {\n            type: 'text',\n            placeholder: 'Search Sequence Name'\n        },\n        value: '',\n    }\n\n    inputChangedHandler = (event) => {\n        const updatedState = {\n            ...this.state\n        };\n        updatedState.value = event.target.value;\n\n        this.setState({state: updatedState});\n    }\n\n    render(){\n        let listDNA = null;\n        if(this.props.DNA.length > 0){\n            listDNA = (\n                <div>\n                    \n                    <Button btnType={'Sort'}>Sort</Button>\n                    <Input\n                        invalid={false}\n                        touched={false}\n                        elementType={this.state.elementType}\n                        name={this.state.name}\n                        elementConfig={this.state.elementConfig}\n                        value={this.state.value}\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)}\n                    />\n                    {this.props.DNA.map(dna => {\n                        return <DNA \n                                    name={dna.sequenceName} \n                                    description={dna.sequenceDescription} \n                                    sequence={dna.sequenceDNA}\n                                />\n                    })}\n                </div>\n            );\n        }else{\n            listDNA = <h2>No DNA samples have been added.</h2>\n        }\n\n        return(\n            <div className={classes.View}>\n                {listDNA}\n            </div>\n        );\n    }\n}\n\nexport default ViewDNA;"]},"metadata":{},"sourceType":"module"}