{"ast":null,"code":"import _defineProperty from \"/Users/lingessrajoo/Desktop/GinkgoBioworks/visualizeDNA/visual-dna/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/lingessrajoo/Desktop/GinkgoBioworks/visualizeDNA/visual-dna/src/Containers/Interface/AddDNA/AddDNA.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport Input from '../../../Components/Input/Input';\nimport Button from '../../../Components/Button/Button';\nimport classes from './AddDNA.module.css';\n\nclass AddDNA extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      DNAForm: {\n        sequenceName: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Sequence Name'\n          },\n          value: ''\n        },\n        sequenceDescription: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Sequence Description'\n          },\n          value: ''\n        },\n        sequenceDNA: {\n          elementType: 'textarea',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'DNA Sequence'\n          },\n          value: ''\n        }\n      }\n    };\n\n    this.inputChangedHandler = (event, inputIdentifier) => {\n      console.log(event.target.value);\n\n      const updatedForm = _objectSpread({}, this.state.DNAForm);\n\n      const updatedFormElement = _objectSpread({}, updatedForm[inputIdentifier]);\n\n      updatedFormElement.value = event.target.value;\n      updatedForm[inputIdentifier] = updatedFormElement;\n      this.setState({\n        DNAForm: updatedForm\n      });\n    };\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.DNAForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.DNAForm[key]\n      });\n    }\n\n    let form = React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: classes.Label,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \"Enter DNA name, description and sequence\"), formElementsArray.map(formElement => React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      changed: event => this.inputChangedHandler(event, formElement.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    })), React.createElement(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"Submit\"));\n    return React.createElement(\"div\", {\n      className: classes.FormLayout,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, form);\n  }\n\n}\n\nexport default AddDNA;","map":{"version":3,"sources":["/Users/lingessrajoo/Desktop/GinkgoBioworks/visualizeDNA/visual-dna/src/Containers/Interface/AddDNA/AddDNA.js"],"names":["React","Component","Input","Button","classes","AddDNA","state","DNAForm","sequenceName","elementType","elementConfig","type","placeholder","value","sequenceDescription","sequenceDNA","inputChangedHandler","event","inputIdentifier","console","log","target","updatedForm","updatedFormElement","setState","render","formElementsArray","key","push","id","config","form","Label","map","formElement","FormLayout"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport Input from '../../../Components/Input/Input';\nimport Button from '../../../Components/Button/Button';\n\nimport classes from './AddDNA.module.css';\n\nclass AddDNA extends Component {\n    state = {\n        DNAForm: {\n            sequenceName: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Sequence Name'\n                },\n                value: ''\n            },\n            sequenceDescription: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Sequence Description'\n                },\n                value: ''\n            },\n            sequenceDNA: {\n                elementType: 'textarea',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'DNA Sequence'\n                },\n                value: ''\n            }\n        }\n    }\n\n    inputChangedHandler = (event, inputIdentifier) => {\n        console.log(event.target.value);\n        const updatedForm = {\n            ...this.state.DNAForm\n        };\n        const updatedFormElement = { \n            ...updatedForm[inputIdentifier]\n        };\n        updatedFormElement.value = event.target.value;\n        updatedForm[inputIdentifier] = updatedFormElement;\n        this.setState({DNAForm: updatedForm});\n    }\n\n    render(){\n        const formElementsArray = [];\n        for (let key in this.state.DNAForm) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.DNAForm[key]\n            });\n        }\n        let form = (\n            <form>\n                <p className={classes.Label}>Enter DNA name, description and sequence</p>\n                {formElementsArray.map(formElement => (\n                    <Input \n                        key={formElement.id}\n                        elementType={formElement.config.elementType}\n                        elementConfig={formElement.config.elementConfig}\n                        value={formElement.config.value}\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)}\n                    />\n                ))}\n                <Button >Submit</Button>\n            </form>\n\n        );\n        return(\n            <div className={classes.FormLayout}>\n                {form}\n            </div>\n        );\n    }\n}\n\nexport default AddDNA;"]},"metadata":{},"sourceType":"module"}