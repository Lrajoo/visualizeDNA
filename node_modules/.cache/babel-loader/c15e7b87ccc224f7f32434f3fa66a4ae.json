{"ast":null,"code":"import _defineProperty from \"/Users/lingessrajoo/Desktop/visualizeDNA/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/lingessrajoo/Desktop/visualizeDNA/src/Containers/Interface/ViewDNA/ViewDNA.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport Modal from '../../../Components/Modal/Modal';\nimport Button from '../../../Components/Button/Button';\nimport DNA from '../../../Components/DNA/DNA';\nimport classes from './ViewDNA.module.css';\nimport Input from '../../../Components/Input/Input';\n\nclass ViewDNA extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      search: {\n        name: 'Search',\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Search Sequence Name'\n        },\n        value: ''\n      }\n    };\n\n    this.inputChangedHandler = event => {\n      const search = _objectSpread({}, this.state.search);\n\n      search.value = event.target.value;\n      this.setState({\n        search: search\n      });\n    };\n  }\n\n  render() {\n    let controls = null;\n    let listDNA = null;\n\n    if (this.props.DNA.length > 0 && this.state.search.value === '') {\n      controls = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, React.createElement(Button, {\n        btnType: 'Sort',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, \"Sort\"), React.createElement(Input, {\n        invalid: false,\n        touched: false,\n        elementType: this.state.elementType,\n        name: this.state.name,\n        elementConfig: this.state.elementConfig,\n        value: this.state.value,\n        changed: event => this.inputChangedHandler(event),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }));\n      listDNA = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, this.props.DNA.map(dna => {\n        return React.createElement(DNA, {\n          name: dna.sequenceName,\n          description: dna.sequenceDescription,\n          sequence: dna.sequenceDNA,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50\n          },\n          __self: this\n        });\n      }));\n    } else if (this.state.search.value !== '') {\n      controls = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(Button, {\n        btnType: 'Sort',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, \"Sort\"), React.createElement(Input, {\n        invalid: false,\n        touched: false,\n        elementType: this.state.elementType,\n        name: this.state.name,\n        elementConfig: this.state.elementConfig,\n        value: this.state.value,\n        changed: event => this.inputChangedHandler(event),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }));\n\n      for (let key in this.props.DNA) {\n        let currName = this.props.DNA[key].sequenceName;\n        let check = currName.includes(this.state.search.value);\n\n        if (check) {\n          this.props.Search.push();\n        }\n      }\n    } else {\n      listDNA = React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, \"No DNA samples have been added.\");\n    }\n\n    return React.createElement(\"div\", {\n      className: classes.View,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, controls, listDNA);\n  }\n\n}\n\nexport default ViewDNA;","map":{"version":3,"sources":["/Users/lingessrajoo/Desktop/visualizeDNA/src/Containers/Interface/ViewDNA/ViewDNA.js"],"names":["React","Component","Modal","Button","DNA","classes","Input","ViewDNA","state","search","name","elementType","elementConfig","type","placeholder","value","inputChangedHandler","event","target","setState","render","controls","listDNA","props","length","map","dna","sequenceName","sequenceDescription","sequenceDNA","key","currName","check","includes","Search","push","View"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Modal from '../../../Components/Modal/Modal';\nimport Button from '../../../Components/Button/Button';\nimport DNA from '../../../Components/DNA/DNA';\nimport classes from './ViewDNA.module.css';\nimport Input from '../../../Components/Input/Input';\n\nclass ViewDNA extends Component {\n    state = {\n        search: {\n            name: 'Search',\n            elementType: 'input',\n            elementConfig: {\n                type: 'text',\n                placeholder: 'Search Sequence Name'\n            },\n            value: ''\n        }\n    }\n\n    inputChangedHandler = (event) => {\n        const search = {\n            ...this.state.search\n        };\n        search.value = event.target.value;\n        this.setState({search: search});\n    }\n\n    render(){\n        let controls = null;\n        let listDNA = null;\n        if(this.props.DNA.length > 0 && this.state.search.value === ''){\n            controls =(\n                <div>\n                    <Button btnType={'Sort'}>Sort</Button>\n                    <Input\n                        invalid={false}\n                        touched={false}\n                        elementType={this.state.elementType}\n                        name={this.state.name}\n                        elementConfig={this.state.elementConfig}\n                        value={this.state.value}\n                        changed={(event) => this.inputChangedHandler(event)}\n                    />\n                </div>\n            );\n            listDNA = (\n                <div>\n                    {this.props.DNA.map(dna => {\n                        return <DNA \n                                    name={dna.sequenceName} \n                                    description={dna.sequenceDescription} \n                                    sequence={dna.sequenceDNA}\n                                />\n                    })}\n                </div>\n            );\n        }else if(this.state.search.value !== ''){\n            controls =(\n                <div>\n                    <Button btnType={'Sort'}>Sort</Button>\n                    <Input\n                        invalid={false}\n                        touched={false}\n                        elementType={this.state.elementType}\n                        name={this.state.name}\n                        elementConfig={this.state.elementConfig}\n                        value={this.state.value}\n                        changed={(event) => this.inputChangedHandler(event)}\n                    />\n                </div>\n            );\n            for(let key in this.props.DNA){\n                let currName = this.props.DNA[key].sequenceName;\n                let check = currName.includes(this.state.search.value);\n                if(check){\n                    this.props.Search.push();\n                }\n            }\n            \n        }else{\n            listDNA = <h2>No DNA samples have been added.</h2>\n        }\n\n        return(\n            <div className={classes.View}>\n                {controls}\n                {listDNA}\n            </div>\n        );\n    }\n}\n\nexport default ViewDNA;"]},"metadata":{},"sourceType":"module"}